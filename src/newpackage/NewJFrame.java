package newpackage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jericho Vega
 */
import java.awt.Color;
import java.sql.*;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import net.proteanit.sql.DbUtils;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import java.time.LocalDateTime;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */

    connectDB connObj = new connectDB();

    public NewJFrame() {
       initComponents();
       connObj.connect();
       

       getDatatoTable();
       courses();
       courseCode();
       yearSection();
       
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sidePanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        addSchedButton = new javax.swing.JToggleButton();
        addCourseButton = new javax.swing.JToggleButton();
        addProfessorButton = new javax.swing.JToggleButton();
        addSubjectButton = new javax.swing.JToggleButton();
        viewButton = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        Logo = new javax.swing.JLabel();
        midPanel = new javax.swing.JPanel();
        addSchedulePanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        courseSecTab = new javax.swing.JPanel();
        scheduleLabel = new javax.swing.JLabel();
        yrSecComboBox = new javax.swing.JComboBox<>();
        courseScheduleButton = new javax.swing.JButton();
        clearScheduleButton = new javax.swing.JButton();
        courseCodeComboBox = new javax.swing.JComboBox<>();
        descriptionField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        roomTab = new javax.swing.JPanel();
        roomScheduleLabel = new javax.swing.JLabel();
        startTimeLabel1 = new javax.swing.JLabel();
        startTimeComboBox1 = new javax.swing.JComboBox<>();
        startTimeFormatCB1 = new javax.swing.JComboBox<>();
        endTimeFormatCB1 = new javax.swing.JComboBox<>();
        endTimeComboBox1 = new javax.swing.JComboBox<>();
        endTimeLabel1 = new javax.swing.JLabel();
        lectureTimeNote = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        startTimeLabel2 = new javax.swing.JLabel();
        endTimeLabel2 = new javax.swing.JLabel();
        startTimeComboBox2 = new javax.swing.JComboBox<>();
        endTimeComboBox2 = new javax.swing.JComboBox<>();
        startTimeFormatCB2 = new javax.swing.JComboBox<>();
        endTimeFormatCB2 = new javax.swing.JComboBox<>();
        roomScheduleButton = new javax.swing.JButton();
        clearRoomField = new javax.swing.JButton();
        dayLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        lectRoomTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        labRoomTextField = new javax.swing.JTextField();
        dayComboBox = new javax.swing.JComboBox<>();
        profTab = new javax.swing.JPanel();
        alternativePanel = new javax.swing.JPanel();
        alternativeLabel = new javax.swing.JLabel();
        alternativePane = new javax.swing.JScrollPane();
        alternativeList = new javax.swing.JList<>();
        schedLabel = new javax.swing.JLabel();
        departmentComboBox = new javax.swing.JComboBox<>();
        profSchedButton = new javax.swing.JButton();
        clearSchedButton1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        enterProfSchedButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        View = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        viewSchedButton = new javax.swing.JButton();
        viewDeletedItemsButton = new javax.swing.JButton();
        deleteScheduleButton = new javax.swing.JButton();
        addCoursePanel = new javax.swing.JPanel();
        courseLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        selectBachelorLabel = new javax.swing.JLabel();
        selectBachelorComboBox = new javax.swing.JComboBox<>();
        bachelorLabel = new javax.swing.JLabel();
        bachelorNameTextField = new javax.swing.JTextField();
        abbreviateTextField = new javax.swing.JTextField();
        abbreviateLabel = new javax.swing.JLabel();
        clearCourseButton = new javax.swing.JButton();
        enterCourseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        abbreviateHintLabel = new javax.swing.JLabel();
        bachelorHintLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        yearTextField = new javax.swing.JTextField();
        yearHintLabel = new javax.swing.JLabel();
        otherDegreeCheckBox = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        yearLabel1 = new javax.swing.JLabel();
        yearTextField1 = new javax.swing.JTextField();
        yearHintLabel1 = new javax.swing.JLabel();
        updateCourseButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sectionTextField = new javax.swing.JTextField();
        coursesComboBox = new javax.swing.JComboBox<>();
        addSectionLabel = new javax.swing.JLabel();
        dashLabel = new javax.swing.JLabel();
        addSection = new javax.swing.JLabel();
        coursesLabel = new javax.swing.JLabel();
        clearCourseButton1 = new javax.swing.JButton();
        enterCourseButton1 = new javax.swing.JButton();
        yearComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        updateSectionButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        deleteCourseButton = new javax.swing.JButton();
        addSubjectPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        subjectTable = new javax.swing.JTable();
        subjectLabel = new javax.swing.JLabel();
        lectureTextField = new javax.swing.JTextField();
        courseCodeTextField = new javax.swing.JTextField();
        fieldTextField = new javax.swing.JTextField();
        courseTitleTextField = new javax.swing.JTextField();
        labTextField = new javax.swing.JTextField();
        addSubjectCCLabel = new javax.swing.JLabel();
        addSubjectDescriptionLabel = new javax.swing.JLabel();
        addSubjectLecLabel = new javax.swing.JLabel();
        addSubjectLabLabel = new javax.swing.JLabel();
        addSubjectFieldLabel = new javax.swing.JLabel();
        enterSubjectButton = new javax.swing.JButton();
        clearSubjectButton = new javax.swing.JButton();
        noButton = new javax.swing.JRadioButton();
        yesButton = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        updateSubjectButton = new javax.swing.JButton();
        deleteSubjectButton = new javax.swing.JButton();
        addProfPanel = new javax.swing.JPanel();
        profLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        professorTable = new javax.swing.JTable();
        profStatusCB = new javax.swing.JComboBox<>();
        profFieldTextField = new javax.swing.JTextField();
        facultyIDTextField = new javax.swing.JTextField();
        addStatusLabel = new javax.swing.JLabel();
        addProfFacultyIDLabel = new javax.swing.JLabel();
        clearProfButton = new javax.swing.JButton();
        addProfField = new javax.swing.JLabel();
        enterProfButton = new javax.swing.JButton();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        updateProfButton = new javax.swing.JButton();
        deleteProfButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 102, 204));
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        setForeground(new java.awt.Color(0, 0, 0));
        setName("Faculty System Scheduling"); // NOI18N

        backgroundPanel.setBackground(new java.awt.Color(255, 255, 255));
        backgroundPanel.setLayout(null);

        topPanel.setBackground(new java.awt.Color(153, 0, 0));
        topPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 3));
        topPanel.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Faculty System Scheduling (San Juan Branch)");
        topPanel.add(jLabel1);
        jLabel1.setBounds(20, 10, 540, 30);

        backgroundPanel.add(topPanel);
        topPanel.setBounds(210, 10, 1110, 50);

        sidePanel.setBackground(new java.awt.Color(153, 0, 0));
        sidePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 3));
        sidePanel.setLayout(null);

        exitButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        exitButton.setText("Log-Out");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        sidePanel.add(exitButton);
        exitButton.setBounds(20, 640, 150, 40);

        menuPanel.setBackground(new java.awt.Color(153, 0, 0));
        menuPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 3));
        menuPanel.setLayout(null);

        addSchedButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSchedButton.setText("Schedule");
        addSchedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSchedButtonActionPerformed(evt);
            }
        });
        menuPanel.add(addSchedButton);
        addSchedButton.setBounds(10, 170, 150, 40);

        addCourseButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addCourseButton.setText("Course");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });
        menuPanel.add(addCourseButton);
        addCourseButton.setBounds(10, 20, 150, 40);

        addProfessorButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addProfessorButton.setText("Professor");
        addProfessorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProfessorButtonActionPerformed(evt);
            }
        });
        menuPanel.add(addProfessorButton);
        addProfessorButton.setBounds(10, 120, 150, 40);

        addSubjectButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectButton.setText("Subject");
        addSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubjectButtonActionPerformed(evt);
            }
        });
        menuPanel.add(addSubjectButton);
        addSubjectButton.setBounds(10, 70, 150, 40);

        viewButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });
        menuPanel.add(viewButton);
        viewButton.setBounds(10, 220, 150, 40);

        sidePanel.add(menuPanel);
        menuPanel.setBounds(10, 180, 170, 450);

        jPanel5.setBackground(new java.awt.Color(153, 0, 0));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 3));
        jPanel5.setLayout(null);

        Logo.setBackground(new java.awt.Color(153, 0, 0));
        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/newpackage/New Logo.png"))); // NOI18N
        jPanel5.add(Logo);
        Logo.setBounds(10, 10, 150, 140);

        sidePanel.add(jPanel5);
        jPanel5.setBounds(10, 10, 170, 160);

        backgroundPanel.add(sidePanel);
        sidePanel.setBounds(10, 10, 190, 700);

        midPanel.setBackground(new java.awt.Color(151, 31, 0));
        midPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        midPanel.setLayout(null);

        addSchedulePanel.setBackground(new java.awt.Color(153, 51, 0));
        addSchedulePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        addSchedulePanel.setLayout(null);

        textArea1.setColumns(20);
        textArea1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        textArea1.setRows(5);
        jScrollPane9.setViewportView(textArea1);
        textArea1.setEditable(false);

        addSchedulePanel.add(jScrollPane9);
        jScrollPane9.setBounds(300, 100, 790, 520);

        courseSecTab.setBackground(new java.awt.Color(151, 31, 0));
        courseSecTab.setLayout(null);

        scheduleLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        scheduleLabel.setForeground(new java.awt.Color(255, 255, 255));
        scheduleLabel.setText("Create Schedule (Course and Section)");
        courseSecTab.add(scheduleLabel);
        scheduleLabel.setBounds(20, 10, 560, 60);

        yrSecComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yrSecComboBoxActionPerformed(evt);
            }
        });
        courseSecTab.add(yrSecComboBox);
        yrSecComboBox.setBounds(20, 100, 260, 30);

        courseScheduleButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        courseScheduleButton.setText("Enter");
        courseScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseScheduleButtonActionPerformed(evt);
            }
        });
        courseSecTab.add(courseScheduleButton);
        courseScheduleButton.setBounds(160, 550, 100, 30);

        clearScheduleButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearScheduleButton.setText("Clear");
        clearScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearScheduleButtonActionPerformed(evt);
            }
        });
        courseSecTab.add(clearScheduleButton);
        clearScheduleButton.setBounds(30, 550, 100, 30);

        courseCodeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseCodeComboBoxActionPerformed(evt);
            }
        });
        courseSecTab.add(courseCodeComboBox);
        courseCodeComboBox.setBounds(20, 160, 260, 30);

        descriptionField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        descriptionField.setText("Course Title");
        courseSecTab.add(descriptionField);
        descriptionField.setBounds(20, 200, 260, 30);
        descriptionField.setEditable(false);

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Course, Year & Section");
        jLabel13.setToolTipText("");
        courseSecTab.add(jLabel13);
        jLabel13.setBounds(20, 80, 270, 20);

        jLabel14.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Course Code");
        courseSecTab.add(jLabel14);
        jLabel14.setBounds(20, 140, 130, 20);

        jTabbedPane2.addTab("Course & Section", courseSecTab);

        roomTab.setBackground(new java.awt.Color(151, 31, 0));
        roomTab.setLayout(null);

        roomScheduleLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        roomScheduleLabel.setForeground(new java.awt.Color(255, 255, 255));
        roomScheduleLabel.setText("Add Room Schedule");
        roomTab.add(roomScheduleLabel);
        roomScheduleLabel.setBounds(20, 10, 560, 60);

        startTimeLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        startTimeLabel1.setForeground(new java.awt.Color(255, 255, 255));
        startTimeLabel1.setText("Start Time:");
        roomTab.add(startTimeLabel1);
        startTimeLabel1.setBounds(20, 230, 100, 30);

        startTimeComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00:00", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30" }));
        roomTab.add(startTimeComboBox1);
        startTimeComboBox1.setBounds(110, 230, 70, 30);

        startTimeFormatCB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        roomTab.add(startTimeFormatCB1);
        startTimeFormatCB1.setBounds(190, 230, 70, 30);

        endTimeFormatCB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        roomTab.add(endTimeFormatCB1);
        endTimeFormatCB1.setBounds(190, 270, 70, 30);

        endTimeComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00:00", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30" }));
        roomTab.add(endTimeComboBox1);
        endTimeComboBox1.setBounds(110, 270, 70, 30);

        endTimeLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        endTimeLabel1.setForeground(new java.awt.Color(255, 255, 255));
        endTimeLabel1.setText("End Time:");
        roomTab.add(endTimeLabel1);
        endTimeLabel1.setBounds(20, 270, 80, 30);

        lectureTimeNote.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lectureTimeNote.setForeground(new java.awt.Color(255, 255, 255));
        lectureTimeNote.setText("Set Time Here for Lecture Room.");
        roomTab.add(lectureTimeNote);
        lectureTimeNote.setBounds(20, 200, 230, 19);

        jLabel20.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Set Time Here for Laboratory Room.");
        roomTab.add(jLabel20);
        jLabel20.setBounds(20, 360, 250, 19);

        startTimeLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        startTimeLabel2.setForeground(new java.awt.Color(255, 255, 255));
        startTimeLabel2.setText("Start Time:");
        roomTab.add(startTimeLabel2);
        startTimeLabel2.setBounds(20, 390, 100, 30);

        endTimeLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        endTimeLabel2.setForeground(new java.awt.Color(255, 255, 255));
        endTimeLabel2.setText("End Time:");
        roomTab.add(endTimeLabel2);
        endTimeLabel2.setBounds(20, 430, 100, 30);

        startTimeComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00:00", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30" }));
        roomTab.add(startTimeComboBox2);
        startTimeComboBox2.setBounds(110, 390, 70, 30);

        endTimeComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00:00", "01:00", "01:30", "02:00", "02:30", "03:00", "03:30", "04:00", "04:30", "05:00", "05:30", "06:00", "06:30", "07:00", "07:30", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30" }));
        roomTab.add(endTimeComboBox2);
        endTimeComboBox2.setBounds(110, 430, 69, 30);

        startTimeFormatCB2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        roomTab.add(startTimeFormatCB2);
        startTimeFormatCB2.setBounds(190, 390, 70, 30);

        endTimeFormatCB2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        roomTab.add(endTimeFormatCB2);
        endTimeFormatCB2.setBounds(190, 430, 70, 30);

        roomScheduleButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        roomScheduleButton.setText("Enter");
        roomScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomScheduleButtonActionPerformed(evt);
            }
        });
        roomTab.add(roomScheduleButton);
        roomScheduleButton.setBounds(160, 550, 100, 30);
        roomScheduleButton.setEnabled(false);

        clearRoomField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearRoomField.setText("Clear");
        clearRoomField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRoomFieldActionPerformed(evt);
            }
        });
        roomTab.add(clearRoomField);
        clearRoomField.setBounds(30, 550, 100, 30);

        dayLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        dayLabel2.setForeground(new java.awt.Color(255, 255, 255));
        dayLabel2.setText("Day");
        roomTab.add(dayLabel2);
        dayLabel2.setBounds(20, 80, 120, 20);

        jLabel17.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Lecture Room");
        roomTab.add(jLabel17);
        jLabel17.setBounds(20, 140, 170, 20);
        roomTab.add(lectRoomTextField);
        lectRoomTextField.setBounds(20, 160, 260, 30);

        jLabel19.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Laboratory Room");
        roomTab.add(jLabel19);
        jLabel19.setBounds(20, 310, 170, 20);
        roomTab.add(labRoomTextField);
        labRoomTextField.setBounds(20, 330, 260, 30);

        dayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        roomTab.add(dayComboBox);
        dayComboBox.setBounds(20, 100, 260, 30);

        jTabbedPane2.addTab("Room", roomTab);

        profTab.setBackground(new java.awt.Color(151, 31, 0));
        profTab.setLayout(null);

        alternativePanel.setBackground(new java.awt.Color(153, 0, 0));
        alternativePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 3));
        alternativePanel.setDoubleBuffered(false);
        alternativePanel.setEnabled(false);
        alternativePanel.setLayout(null);

        alternativeLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 24)); // NOI18N
        alternativeLabel.setForeground(new java.awt.Color(255, 255, 255));
        alternativeLabel.setText("Available Professor");
        alternativePanel.add(alternativeLabel);
        alternativeLabel.setBounds(60, 0, 151, 30);

        alternativeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        alternativePane.setViewportView(alternativeList);

        alternativePanel.add(alternativePane);
        alternativePane.setBounds(10, 30, 240, 250);

        profTab.add(alternativePanel);
        alternativePanel.setBounds(20, 180, 260, 290);

        schedLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        schedLabel.setForeground(new java.awt.Color(255, 255, 255));
        schedLabel.setText("Add Professor Schedule");
        profTab.add(schedLabel);
        schedLabel.setBounds(20, 10, 370, 60);

        departmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentComboBoxActionPerformed(evt);
            }
        });
        profTab.add(departmentComboBox);
        departmentComboBox.setBounds(20, 100, 260, 30);

        profSchedButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        profSchedButton.setText("Enter");
        profSchedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profSchedButtonActionPerformed(evt);
            }
        });
        profTab.add(profSchedButton);
        profSchedButton.setBounds(160, 550, 100, 30);

        clearSchedButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearSchedButton1.setText("Clear");
        clearSchedButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSchedButton1ActionPerformed(evt);
            }
        });
        profTab.add(clearSchedButton1);
        clearSchedButton1.setBounds(30, 550, 100, 30);

        jLabel16.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Department Field");
        profTab.add(jLabel16);
        jLabel16.setBounds(20, 80, 260, 20);

        enterProfSchedButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enterProfSchedButton1.setText("APPLY");
        enterProfSchedButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterProfSchedButton1ActionPerformed(evt);
            }
        });
        profTab.add(enterProfSchedButton1);
        enterProfSchedButton1.setBounds(480, 20, 160, 40);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Full-Time", "Part-Time" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        profTab.add(jComboBox1);
        jComboBox1.setBounds(20, 140, 260, 30);

        jTabbedPane2.addTab("Professor", profTab);

        addSchedulePanel.add(jTabbedPane2);
        jTabbedPane2.setBounds(5, 5, 1100, 630);

        midPanel.add(addSchedulePanel);
        addSchedulePanel.setBounds(0, 0, 1110, 640);
        addSchedulePanel.setVisible(false);

        View.setBackground(new java.awt.Color(153, 0, 0));
        View.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        View.setLayout(null);

        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scheduleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scheduleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scheduleTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(scheduleTable);

        View.add(jScrollPane2);
        jScrollPane2.setBounds(21, 71, 1070, 510);

        viewSchedButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        viewSchedButton.setText("Schedule");
        viewSchedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSchedButtonActionPerformed(evt);
            }
        });
        View.add(viewSchedButton);
        viewSchedButton.setBounds(20, 20, 200, 40);

        viewDeletedItemsButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        viewDeletedItemsButton.setText("Deleted Items");
        viewDeletedItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDeletedItemsButtonActionPerformed(evt);
            }
        });
        View.add(viewDeletedItemsButton);
        viewDeletedItemsButton.setBounds(250, 20, 200, 40);

        deleteScheduleButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        deleteScheduleButton.setText("Delete Schedule");
        deleteScheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteScheduleButtonActionPerformed(evt);
            }
        });
        View.add(deleteScheduleButton);
        deleteScheduleButton.setBounds(30, 590, 190, 40);

        midPanel.add(View);
        View.setBounds(0, 0, 1110, 640);
        View.setVisible(false);

        addCoursePanel.setBackground(new java.awt.Color(151, 31, 0));
        addCoursePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        addCoursePanel.setLayout(null);

        courseLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        courseLabel.setForeground(new java.awt.Color(255, 255, 255));
        courseLabel.setText("Course");
        addCoursePanel.add(courseLabel);
        courseLabel.setBounds(20, 10, 240, 78);

        jTabbedPane1.setBackground(new java.awt.Color(255, 102, 0));
        jTabbedPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jPanel1.setBackground(new java.awt.Color(151, 31, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setLayout(null);

        selectBachelorLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        selectBachelorLabel.setForeground(new java.awt.Color(255, 255, 255));
        selectBachelorLabel.setText("Select Bachelor's Degree");
        jPanel1.add(selectBachelorLabel);
        selectBachelorLabel.setBounds(10, 70, 250, 20);

        selectBachelorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bachelor of Science in Information Technology", "Bachelor of Science in Accountancy", "Bachelor of Science in Hospitality Management", "Bachelor of Science in Financial Management", "Bachelor of Science in Entrepreneurship", "Bachelor of Secondary Education" }));
        selectBachelorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBachelorComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(selectBachelorComboBox);
        selectBachelorComboBox.setBounds(10, 90, 340, 30);

        bachelorLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        bachelorLabel.setForeground(new java.awt.Color(255, 255, 255));
        bachelorLabel.setText("Bachelor's Degree");
        bachelorLabel.setEnabled(false);
        jPanel1.add(bachelorLabel);
        bachelorLabel.setBounds(10, 230, 210, 20);

        bachelorNameTextField.setEnabled(false);
        jPanel1.add(bachelorNameTextField);
        bachelorNameTextField.setBounds(10, 250, 340, 30);

        abbreviateTextField.setEnabled(false);
        jPanel1.add(abbreviateTextField);
        abbreviateTextField.setBounds(10, 330, 120, 30);

        abbreviateLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        abbreviateLabel.setForeground(new java.awt.Color(255, 255, 255));
        abbreviateLabel.setText("Abbreviate");
        abbreviateLabel.setEnabled(false);
        jPanel1.add(abbreviateLabel);
        abbreviateLabel.setBounds(10, 310, 120, 24);

        clearCourseButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearCourseButton.setText("Clear");
        clearCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCourseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(clearCourseButton);
        clearCourseButton.setBounds(10, 480, 110, 30);

        enterCourseButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enterCourseButton.setText("Enter");
        enterCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterCourseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(enterCourseButton);
        enterCourseButton.setBounds(250, 480, 110, 30);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Create Course");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 10, 270, 50);

        abbreviateHintLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        abbreviateHintLabel.setForeground(new java.awt.Color(255, 255, 255));
        abbreviateHintLabel.setText("(e.g. BSA)");
        abbreviateHintLabel.setEnabled(false);
        jPanel1.add(abbreviateHintLabel);
        abbreviateHintLabel.setBounds(10, 360, 70, 20);

        bachelorHintLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        bachelorHintLabel.setForeground(new java.awt.Color(255, 255, 255));
        bachelorHintLabel.setText("(e.g. Bachelor of Science in Accountancy)");
        bachelorHintLabel.setEnabled(false);
        jPanel1.add(bachelorHintLabel);
        bachelorHintLabel.setBounds(10, 280, 300, 20);

        yearLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        yearLabel.setForeground(new java.awt.Color(255, 255, 255));
        yearLabel.setText("Year");
        jPanel1.add(yearLabel);
        yearLabel.setBounds(150, 130, 110, 20);
        jPanel1.add(yearTextField);
        yearTextField.setBounds(150, 150, 90, 30);

        yearHintLabel.setForeground(new java.awt.Color(255, 255, 255));
        yearHintLabel.setText("*(Input the Maximum Year)");
        jPanel1.add(yearHintLabel);
        yearHintLabel.setBounds(150, 180, 160, 16);

        otherDegreeCheckBox.setBackground(new java.awt.Color(0, 0, 0));
        otherDegreeCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        otherDegreeCheckBox.setText("Others");
        otherDegreeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherDegreeCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(otherDegreeCheckBox);
        otherDegreeCheckBox.setBounds(10, 200, 64, 24);

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Abbreviate");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(10, 130, 110, 24);
        jPanel1.add(jTextField1);
        jTextField1.setBounds(10, 150, 120, 30);
        jTextField1.setEditable(false);

        yearLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        yearLabel1.setForeground(new java.awt.Color(255, 255, 255));
        yearLabel1.setText("Year");
        yearLabel1.setEnabled(false);
        jPanel1.add(yearLabel1);
        yearLabel1.setBounds(150, 310, 110, 20);

        yearTextField1.setEnabled(false);
        jPanel1.add(yearTextField1);
        yearTextField1.setBounds(150, 330, 90, 30);

        yearHintLabel1.setForeground(new java.awt.Color(255, 255, 255));
        yearHintLabel1.setText("*(Input the Maximum Year)");
        yearHintLabel1.setEnabled(false);
        jPanel1.add(yearHintLabel1);
        yearHintLabel1.setBounds(150, 360, 160, 16);

        updateCourseButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        updateCourseButton.setText("Update");
        updateCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCourseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateCourseButton);
        updateCourseButton.setBounds(130, 480, 110, 30);
        updateCourseButton.setEnabled(false);

        jTabbedPane1.addTab("Course", jPanel1);

        jPanel2.setBackground(new java.awt.Color(151, 31, 0));
        jPanel2.setLayout(null);

        sectionTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jPanel2.add(sectionTextField);
        sectionTextField.setBounds(150, 160, 90, 30);

        coursesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursesComboBoxActionPerformed(evt);
            }
        });
        jPanel2.add(coursesComboBox);
        coursesComboBox.setBounds(10, 90, 310, 30);

        addSectionLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSectionLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSectionLabel.setText("Section");
        jPanel2.add(addSectionLabel);
        addSectionLabel.setBounds(150, 130, 70, 30);

        dashLabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        dashLabel.setForeground(new java.awt.Color(255, 255, 255));
        dashLabel.setText(" -");
        jPanel2.add(dashLabel);
        dashLabel.setBounds(110, 160, 40, 30);

        addSection.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        addSection.setForeground(new java.awt.Color(255, 255, 255));
        addSection.setText("Add Section");
        jPanel2.add(addSection);
        addSection.setBounds(10, 10, 330, 50);

        coursesLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        coursesLabel.setForeground(new java.awt.Color(255, 255, 255));
        coursesLabel.setText("Courses");
        jPanel2.add(coursesLabel);
        coursesLabel.setBounds(10, 70, 200, 20);

        clearCourseButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearCourseButton1.setText("Clear");
        clearCourseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCourseButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(clearCourseButton1);
        clearCourseButton1.setBounds(10, 480, 110, 30);

        enterCourseButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enterCourseButton1.setText("Enter");
        enterCourseButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterCourseButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(enterCourseButton1);
        enterCourseButton1.setBounds(250, 480, 110, 30);

        jPanel2.add(yearComboBox);
        yearComboBox.setBounds(10, 160, 100, 30);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Year");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 130, 41, 30);

        updateSectionButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        updateSectionButton.setText("Update");
        updateSectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSectionButtonActionPerformed(evt);
            }
        });
        jPanel2.add(updateSectionButton);
        updateSectionButton.setBounds(130, 480, 110, 30);
        updateSectionButton.setEnabled(false);

        jTabbedPane1.addTab("Section", jPanel2);

        addCoursePanel.add(jTabbedPane1);
        jTabbedPane1.setBounds(0, 80, 370, 550);

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        courseTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        courseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(courseTable);

        addCoursePanel.add(jScrollPane1);
        jScrollPane1.setBounds(370, 90, 730, 540);

        deleteCourseButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        deleteCourseButton.setText("Delete");
        deleteCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCourseButtonActionPerformed(evt);
            }
        });
        addCoursePanel.add(deleteCourseButton);
        deleteCourseButton.setBounds(370, 50, 130, 30);

        midPanel.add(addCoursePanel);
        addCoursePanel.setBounds(0, 0, 1110, 640);
        addCoursePanel.setVisible(false);

        addSubjectPanel.setBackground(new java.awt.Color(151, 31, 0));
        addSubjectPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        addSubjectPanel.setLayout(null);

        subjectTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 4"
            }
        ));
        subjectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(subjectTable);

        addSubjectPanel.add(jScrollPane5);
        jScrollPane5.setBounds(350, 90, 750, 540);

        subjectLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        subjectLabel.setForeground(new java.awt.Color(255, 255, 255));
        subjectLabel.setText("Add Subject");
        addSubjectPanel.add(subjectLabel);
        subjectLabel.setBounds(20, 10, 310, 78);

        lectureTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addSubjectPanel.add(lectureTextField);
        lectureTextField.setBounds(20, 390, 110, 30);

        courseCodeTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        courseCodeTextField.setActionCommand("<Not Set>");
        addSubjectPanel.add(courseCodeTextField);
        courseCodeTextField.setBounds(20, 110, 300, 30);

        fieldTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addSubjectPanel.add(fieldTextField);
        fieldTextField.setBounds(20, 270, 300, 30);

        courseTitleTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addSubjectPanel.add(courseTitleTextField);
        courseTitleTextField.setBounds(20, 190, 300, 30);

        labTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addSubjectPanel.add(labTextField);
        labTextField.setBounds(20, 510, 110, 30);
        labTextField.setEnabled(false);

        addSubjectCCLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectCCLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSubjectCCLabel.setText("Course Code");
        addSubjectPanel.add(addSubjectCCLabel);
        addSubjectCCLabel.setBounds(20, 90, 120, 20);

        addSubjectDescriptionLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectDescriptionLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSubjectDescriptionLabel.setText("Course Title");
        addSubjectPanel.add(addSubjectDescriptionLabel);
        addSubjectDescriptionLabel.setBounds(20, 170, 250, 20);

        addSubjectLecLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectLecLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSubjectLecLabel.setText("Lecture");
        addSubjectPanel.add(addSubjectLecLabel);
        addSubjectLecLabel.setBounds(20, 370, 80, 20);

        addSubjectLabLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectLabLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSubjectLabLabel.setText("Laboratory");
        addSubjectPanel.add(addSubjectLabLabel);
        addSubjectLabLabel.setBounds(20, 490, 100, 20);

        addSubjectFieldLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addSubjectFieldLabel.setForeground(new java.awt.Color(255, 255, 255));
        addSubjectFieldLabel.setText("Department Field");
        addSubjectPanel.add(addSubjectFieldLabel);
        addSubjectFieldLabel.setBounds(20, 250, 250, 20);

        enterSubjectButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enterSubjectButton.setText("Enter");
        enterSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterSubjectButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(enterSubjectButton);
        enterSubjectButton.setBounds(240, 590, 100, 30);

        clearSubjectButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearSubjectButton.setText("Clear");
        clearSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSubjectButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(clearSubjectButton);
        clearSubjectButton.setBounds(20, 590, 100, 30);

        noButton.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(noButton);
        noButton.setForeground(new java.awt.Color(255, 255, 255));
        noButton.setText("No");
        noButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(noButton);
        noButton.setBounds(80, 460, 50, 20);

        yesButton.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup1.add(yesButton);
        yesButton.setForeground(new java.awt.Color(255, 255, 255));
        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(yesButton);
        yesButton.setBounds(20, 460, 50, 20);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 17)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Units In Lecture and Laboratory");
        addSubjectPanel.add(jLabel4);
        jLabel4.setBounds(20, 340, 290, 20);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("(e.g. Accounting)");
        addSubjectPanel.add(jLabel5);
        jLabel5.setBounds(20, 300, 260, 20);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("(e.g.  ACCO 20213)");
        addSubjectPanel.add(jLabel6);
        jLabel6.setBounds(20, 140, 170, 20);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("(e.g. Accounting Principles)");
        addSubjectPanel.add(jLabel7);
        jLabel7.setBounds(20, 220, 210, 20);

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("*Do You Have Laboratory?");
        addSubjectPanel.add(jLabel10);
        jLabel10.setBounds(20, 440, 200, 20);

        updateSubjectButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        updateSubjectButton.setText("Update");
        updateSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSubjectButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(updateSubjectButton);
        updateSubjectButton.setBounds(130, 590, 100, 30);
        updateSubjectButton.setEnabled(false);

        deleteSubjectButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        deleteSubjectButton.setText("Delete");
        deleteSubjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSubjectButtonActionPerformed(evt);
            }
        });
        addSubjectPanel.add(deleteSubjectButton);
        deleteSubjectButton.setBounds(350, 50, 130, 30);

        midPanel.add(addSubjectPanel);
        addSubjectPanel.setBounds(0, 0, 1110, 640);
        addSubjectPanel.setVisible(false);

        addProfPanel.setBackground(new java.awt.Color(151, 31, 0));
        addProfPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0), 5));
        addProfPanel.setLayout(null);

        profLabel.setFont(new java.awt.Font("Haettenschweiler", 0, 48)); // NOI18N
        profLabel.setForeground(new java.awt.Color(255, 255, 255));
        profLabel.setText("Add Professor");
        addProfPanel.add(profLabel);
        profLabel.setBounds(20, 10, 310, 80);

        professorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Status", "Field", "Hrs", "Avl"
            }
        ));
        professorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                professorTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(professorTable);

        addProfPanel.add(jScrollPane3);
        jScrollPane3.setBounds(350, 90, 750, 540);

        profStatusCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Part-Time", "Full-Time" }));
        profStatusCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profStatusCBActionPerformed(evt);
            }
        });
        addProfPanel.add(profStatusCB);
        profStatusCB.setBounds(20, 270, 260, 30);

        profFieldTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addProfPanel.add(profFieldTextField);
        profFieldTextField.setBounds(20, 340, 260, 30);

        facultyIDTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addProfPanel.add(facultyIDTextField);
        facultyIDTextField.setBounds(20, 110, 300, 30);

        addStatusLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addStatusLabel.setForeground(new java.awt.Color(255, 255, 255));
        addStatusLabel.setText("Status");
        addProfPanel.add(addStatusLabel);
        addStatusLabel.setBounds(20, 250, 120, 20);

        addProfFacultyIDLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addProfFacultyIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        addProfFacultyIDLabel.setText("Faculty ID");
        addProfPanel.add(addProfFacultyIDLabel);
        addProfFacultyIDLabel.setBounds(20, 90, 90, 20);

        clearProfButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        clearProfButton.setText("Clear");
        clearProfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearProfButtonActionPerformed(evt);
            }
        });
        addProfPanel.add(clearProfButton);
        clearProfButton.setBounds(20, 590, 100, 30);

        addProfField.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        addProfField.setForeground(new java.awt.Color(255, 255, 255));
        addProfField.setText("Department Field");
        addProfPanel.add(addProfField);
        addProfField.setBounds(20, 320, 160, 20);

        enterProfButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        enterProfButton.setText("Enter");
        enterProfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterProfButtonActionPerformed(evt);
            }
        });
        addProfPanel.add(enterProfButton);
        enterProfButton.setBounds(240, 590, 100, 30);

        lastNameTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addProfPanel.add(lastNameTextField);
        lastNameTextField.setBounds(20, 200, 140, 30);

        firstNameTextField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        addProfPanel.add(firstNameTextField);
        firstNameTextField.setBounds(170, 200, 150, 30);

        lastNameLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lastNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        lastNameLabel.setText("Last Name");
        addProfPanel.add(lastNameLabel);
        lastNameLabel.setBounds(20, 180, 100, 20);

        firstNameLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        firstNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        firstNameLabel.setText("First Name");
        addProfPanel.add(firstNameLabel);
        firstNameLabel.setBounds(170, 180, 100, 20);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("(e.g. FA0000SJ2019)");
        addProfPanel.add(jLabel8);
        jLabel8.setBounds(20, 140, 180, 20);

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("(e.g. General Education)");
        addProfPanel.add(jLabel9);
        jLabel9.setBounds(20, 370, 180, 20);

        updateProfButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        updateProfButton.setText("Update");
        updateProfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProfButtonActionPerformed(evt);
            }
        });
        addProfPanel.add(updateProfButton);
        updateProfButton.setBounds(130, 590, 100, 30);
        updateProfButton.setEnabled(false);

        deleteProfButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        deleteProfButton.setText("Delete");
        deleteProfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProfButtonActionPerformed(evt);
            }
        });
        addProfPanel.add(deleteProfButton);
        deleteProfButton.setBounds(350, 50, 130, 30);

        midPanel.add(addProfPanel);
        addProfPanel.setBounds(0, 0, 1110, 640);
        addProfPanel.setVisible(false);

        backgroundPanel.add(midPanel);
        midPanel.setBounds(210, 70, 1110, 640);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private int hrs = 0;
    private int total = 0;
    private String getProfStatus = "";
    private String getCourseCode = "";
    private String getSectCode = "";
    private String yearSection = "";
    private String courseCode = "";
    private DefaultListModel dlm = new DefaultListModel();
    private String lectureRoom = "";
    private String lecIn = "";
    private String lecOut = "";
    private String laboratoryRoom = "";
    private String labIn = "";
    private String labOut = "";
    private String day = "";
    private String lecture = "";
    private String laboratory = "";
    private ArrayList<Integer> copyLecInArray = new ArrayList<>();
    private ArrayList<Integer> copyLecOutArray = new ArrayList<>();
    private ArrayList<Integer> copyLabInArray = new ArrayList<>();
    private ArrayList<Integer> copyLabOutArray = new ArrayList<>();


    //*************Adding Course Section******************//
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int x = 0;
        x = JOptionPane.showConfirmDialog(null,"Are you sure you want to log-out?","Message",JOptionPane.YES_NO_OPTION);
        switch(x){
            case 0:
                LogIn logIn = new LogIn();
                logIn.setVisible(true);
                logIn.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.dispose();                
            break;
            case 1:
                
            break;             
        }

        
    }//GEN-LAST:event_exitButtonActionPerformed

    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        // Showing and Selecting When Pressed...
        addProfessorButton.setSelected(false);
        addSubjectButton.setSelected(false);
        addSchedButton.setSelected(false);
        viewButton.setSelected(false);
        if (addCourseButton.isSelected()) {
            addCoursePanel.setVisible(true);
            addSubjectPanel.setVisible(false);
            addProfPanel.setVisible(false);
            addSchedulePanel.setVisible(false);
            View.setVisible(false);
        }
        else{
            addCoursePanel.setVisible(false);
        }
        
        updateSubjectButton.setEnabled(false);
        fieldTextField.setText("");
        courseCodeTextField.setText("");
        courseTitleTextField.setText("");
        buttonGroup1.clearSelection();
        lectureTextField.setText("");
        labTextField.setText("");
        subjectTable.clearSelection();
        
        updateProfButton.setEnabled(false);
        profStatusCB.setSelectedIndex(0);
        facultyIDTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        professorTable.clearSelection();
        profFieldTextField.setText("");

        dayComboBox.setSelectedIndex(0);
        lectRoomTextField.setText("");
        startTimeComboBox1.setSelectedIndex(0);
        startTimeFormatCB1.setSelectedIndex(0);
        endTimeComboBox1.setSelectedIndex(0);
 
        textArea1.setText("");
        
        labRoomTextField.setText("");
        startTimeComboBox2.setSelectedIndex(0);
        startTimeFormatCB2.setSelectedIndex(0);
        endTimeComboBox2.setSelectedIndex(0);         
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void enterCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterCourseButtonActionPerformed
      // This is what is going to Happen if the Enter Course Button is Pressed...
        int countYear = 1;        
        boolean checker = true;
        String degree = "";
        String abbreviate = "";
        String year = "";
        int itemCount = selectBachelorComboBox.getItemCount();
        if(otherDegreeCheckBox.isSelected()){
          for(int i = 0 ; i < itemCount;i++){
                    if(selectBachelorComboBox.getItemAt(i).equals((String)bachelorNameTextField.getText())){
                        JOptionPane.showMessageDialog(null, selectBachelorComboBox.getItemAt(i) + " is Already Exist");
                        break;
                    }else{
                        degree = (String)bachelorNameTextField.getText();
                        abbreviate = (String)abbreviateTextField.getText();
                        year = (String)yearTextField1.getText();
                        break;
                    }
                }
        }else{
            degree = (String)selectBachelorComboBox.getSelectedItem();
            abbreviate = (String)jTextField1.getText();
            year = (String)yearTextField.getText();
        }
        
        if(bachelorNameTextField.getText().isBlank() && abbreviateTextField.getText().isBlank() && yearTextField.getText().isBlank())
        {
            JOptionPane.showMessageDialog(null,"Please Complete All Fields");
        }else{
            try{
                PreparedStatement prepState = connObj.conObj.prepareStatement("Select * From facultydata.course where Course_Year_Section = ?");
                prepState.setString(1,abbreviate + " " + countYear + "-" + "1");
                connObj.rsObj = prepState.executeQuery();
                checker = connObj.rsObj.next();// Getting Existing data from the database...
            }catch(SQLException e){
                e.printStackTrace();
            }
        
            if(checker){ // Checks if data is already exist...
                JOptionPane.showMessageDialog(null,"Data Has Already Been Added");
            }else{
                int maxYear = Integer.parseInt(year);
                while(countYear <= maxYear){// Counts From 1 to 4...
                    try{
                        PreparedStatement prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.course VALUES (?,?,?,?,?)");
                        prepState.setString(1, degree);
                        prepState.setString(2, abbreviate + " " + countYear +"-"+1);
                        prepState.setString(3, abbreviate);
                        prepState.setInt(4, countYear);
                        prepState.setInt(5, 1);             
                            prepState.execute(); // Inserting values from the data base...
                    }catch(SQLException e){
                        e.printStackTrace();
                    }
                    countYear++; // Increments the Count Year...  
                }
                try {
                    connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
                    courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj)); // Reading the data and transfers it to Java Course Table Model...

                    connObj.rsObj = connObj.stateObj.executeQuery("SELECT DISTINCT COURSE.Course_Name FROM FACULTYDATA.COURSE ");// To prevent Same Course Name...
                    connObj.rsObj.last();
                    coursesComboBox.addItem(connObj.rsObj.getString("Course.Course_Name"));//From Database Transfering the Item to Course Combo Box...
                
                }catch(SQLException e){
                e.printStackTrace();
                }            
            } 
        }
 /* 
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");   
        yearTextField.setText("");
        
       
*/
    }//GEN-LAST:event_enterCourseButtonActionPerformed

    private void clearCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCourseButtonActionPerformed
        // Clearing Input Fields...      
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");
        yearTextField.setText("");
        yearTextField1.setText("");
        otherDegreeCheckBox.setSelected(false);
        updateCourseButton.setEnabled(false);
        if(!otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           selectBachelorLabel.setEnabled(true);
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);
           courseTable.clearSelection();
           selectBachelorComboBox.setEnabled(true);
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearTextField.setEnabled(true);
           yearHintLabel.setEnabled(true);
           
           abbreviateTextField.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);
        }
      
    }//GEN-LAST:event_clearCourseButtonActionPerformed

    private void coursesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursesComboBoxActionPerformed
        // This Course ComboBox is use to view the Courses that has been added to the database...
       
        try{
            yearComboBox.removeAllItems();// To Avoid Course Year Duplication when a certain Course is pressed...
            String sql = "SELECT DISTINCT COURSE.YEAR FROM FACULTYDATA.COURSE WHERE Course.Course_Name = ?";// Preventing Course Duplication...
            PreparedStatement statement = connObj.conObj.prepareStatement(sql);
            statement.setString(1,(String)coursesComboBox.getSelectedItem());
            ResultSet set = statement.executeQuery();
            while(set.next()){
                yearComboBox.addItem(set.getString("Course.Year")); //Transfering database output year and transfering to Java Year ComboBox...
            } 
            
        }catch(SQLException e){
            
        }
        
        
    }//GEN-LAST:event_coursesComboBoxActionPerformed

    private void clearCourseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCourseButton1ActionPerformed
        // Clearing input Fields
        coursesComboBox.setSelectedIndex(0);
        yearComboBox.setSelectedIndex(0);
        sectionTextField.setText("");
        courseTable.clearSelection();
        updateSectionButton.setEnabled(false);
    }//GEN-LAST:event_clearCourseButton1ActionPerformed

    private void enterCourseButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterCourseButton1ActionPerformed
        // This is what is going to Happen if the Enter Course Button 1 is Pressed...
        
      boolean checker = true;
             
      if(sectionTextField.getText().equals("")){ //Checking if Section Text Field has input...
          JOptionPane.showMessageDialog(null, "Please Complete All the Fields");
      }else{
            try{           
                PreparedStatement prepState = connObj.conObj.prepareStatement("Select * From Facultydata.course where Course.Course_Name = ?");
                    prepState.setString(1,(String)coursesComboBox.getSelectedItem());
                ResultSet set = prepState.executeQuery();
                    set.first();
                String abbr = set.getString("Abbreviate");//Transfering Abbreviate From Database to Java String...
            
                prepState = connObj.conObj.prepareStatement("Select * From facultydata.course where Course_Year_Section = ?");
                    prepState.setString(1, abbr + " " + (String)yearComboBox.getSelectedItem() + "-" + sectionTextField.getText());
                connObj.rsObj = prepState.executeQuery();
                checker = connObj.rsObj.next();// Locating existing data...
                
                if(checker){//Checking if the data is already exist...
                    JOptionPane.showMessageDialog(null,"Section is Already Added");
                }else{
                    prepState = connObj.conObj.prepareStatement("Insert Into FacultyData.Course Values(?,?,?,?,?)");
                        prepState.setString(1,(String)coursesComboBox.getSelectedItem());
                        prepState.setString(2, abbr + " " + (String)yearComboBox.getSelectedItem() + "-" + sectionTextField.getText());
                        prepState.setString(3,abbr);
                        prepState.setInt(4, Integer.parseInt((String)yearComboBox.getSelectedItem()));
                        prepState.setInt(5, Integer.parseInt(sectionTextField.getText()));
                        prepState.execute();  //Adding New Data to Database Course Table...
           
                    connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
                    courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj)); // Transfering database table to Java Table Model...
                    
                    connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.course");
                    connObj.rsObj.last();
                    yrSecComboBox.addItem(connObj.rsObj.getString("Course_Year_Section")); //Adding New Section Code to Year Section Combo Box...
                    
                    sectionTextField.setText("");
                    coursesComboBox.setSelectedIndex(0);
                    yearComboBox.setSelectedIndex(0);  
                    
                }                    
            }catch(SQLException e){
                e.printStackTrace();   
            }      
        }       
 
    }//GEN-LAST:event_enterCourseButton1ActionPerformed

   
    //************Adding Subject Section******************//
    private int lab = 0;
    
    private void addSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubjectButtonActionPerformed
        // TODO add your handling code here:
        addCourseButton.setSelected(false);
        addProfessorButton.setSelected(false);
        addSchedButton.setSelected(false);
        viewButton.setSelected(false);
        if(addSubjectButton.isSelected()){
            addSubjectPanel.setVisible(true);
            addCoursePanel.setVisible(false);
            addProfPanel.setVisible(false);
            addSchedulePanel.setVisible(false);
            View.setVisible(false);
        }else{
            addSubjectPanel.setVisible(false);
        }
        
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");
        yearTextField.setText("");
        yearTextField1.setText("");
        selectBachelorComboBox.setSelectedIndex(0);
        otherDegreeCheckBox.setSelected(false);
        updateCourseButton.setEnabled(false);
        courseTable.clearSelection();
       
        if(!otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           selectBachelorLabel.setEnabled(true);
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);
           courseTable.clearSelection();
           selectBachelorComboBox.setEnabled(true);
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearTextField.setEnabled(true);
           yearHintLabel.setEnabled(true);
           
           abbreviateTextField.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);
        }   
        
        coursesComboBox.setSelectedIndex(0);
        yearComboBox.setSelectedIndex(0);
        sectionTextField.setText("");
        courseTable.clearSelection();
        updateSectionButton.setEnabled(false);
        
        updateProfButton.setEnabled(false);
        profStatusCB.setSelectedIndex(0);
        facultyIDTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        professorTable.clearSelection();
        profFieldTextField.setText("");
      
        textArea1.setText("");
        
        dayComboBox.setSelectedIndex(0);
        lectRoomTextField.setText("");
        startTimeComboBox1.setSelectedIndex(0);
        startTimeFormatCB1.setSelectedIndex(0);
        endTimeComboBox1.setSelectedIndex(0);
 
        labRoomTextField.setText("");
        startTimeComboBox2.setSelectedIndex(0);
        startTimeFormatCB2.setSelectedIndex(0);
        endTimeComboBox2.setSelectedIndex(0);          
    }//GEN-LAST:event_addSubjectButtonActionPerformed

    private int clicks = 0;
    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        // TODO add your handling code here:
       clicks = 0;
       if(clicks >= 1){     
          buttonGroup1.clearSelection();
        }else{
              labTextField.setEnabled(true);
              clicks++;               
       } 
     
    }//GEN-LAST:event_yesButtonActionPerformed

    private void noButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noButtonActionPerformed
        // TODO add your handling code here:
        clicks = 0;
        if(clicks >= 1){
           
            buttonGroup1.clearSelection();
        }else{
             
              labTextField.setEnabled(false);
              clicks++;               
       }

    }//GEN-LAST:event_noButtonActionPerformed
    private String subjectData = "";
    private String getCourseCode1 = "";
    private void enterSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterSubjectButtonActionPerformed
        // TODO add your handling code here:
     if(yesButton.isSelected()){
         lab = Integer.parseInt(labTextField.getText());         
     }else{
         lab = 0;  
     } 
     if(courseCodeTextField.getText().equals("") || courseTitleTextField.getText().equals("") || fieldTextField.getText().equals("") || lectureTextField.getText().equals("")){
         JOptionPane.showMessageDialog(null,"Please Complete All the Fields");
     }else{
       
        try{
            PreparedStatement prepState = connObj.conObj.prepareStatement("Select Code From FacultyData.Subject Where Code = ?");
            prepState.setString(1,courseCodeTextField.getText());
            connObj.rsObj = prepState.executeQuery();
            if(connObj.rsObj.first()){
                JOptionPane.showMessageDialog(null,"Course Code already Exist");
            }else{
                connObj.addSubjectData(fieldTextField.getText(), courseCodeTextField.getText(),courseTitleTextField.getText() , Integer.parseInt(lectureTextField.getText()), lab);
                connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.subject");
                connObj.rsObj.last();
                courseCodeComboBox.addItem(connObj.rsObj.getString("Code"));    
                connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.subject");
                subjectTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));  
                getCourseCode1 = courseCodeTextField.getText();
                subjectData = fieldTextField.getText() + " - " + courseCodeTextField.getText() + " - " + courseTitleTextField.getText() + " - " + Integer.parseInt(lectureTextField.getText()) + " - " + lab;
                fieldTextField.setText("");
                courseCodeTextField.setText("");
                courseTitleTextField.setText("");
                buttonGroup1.clearSelection();
                lectureTextField.setText("");
                labTextField.setText("");                
            }
                   
     }catch(SQLException e){
         e.printStackTrace();
     }         
     }
     

    
    }//GEN-LAST:event_enterSubjectButtonActionPerformed

    private void clearSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSubjectButtonActionPerformed
        // TODO add your handling code here:
            updateSubjectButton.setEnabled(false);
            fieldTextField.setText("");
            courseCodeTextField.setText("");
            courseTitleTextField.setText("");
            buttonGroup1.clearSelection();
            lectureTextField.setText("");
            labTextField.setText("");
            subjectTable.clearSelection();

    }//GEN-LAST:event_clearSubjectButtonActionPerformed

    //************Adding Professor Section***************//
    private void addProfessorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProfessorButtonActionPerformed
        // TODO add your handling code here:
        addCourseButton.setSelected(false);
        addSubjectButton.setSelected(false);
        addSchedButton.setSelected(false);
        viewButton.setSelected(false);
        if (addProfessorButton.isSelected()) {
            addCoursePanel.setVisible(false);
            addSubjectPanel.setVisible(false);
            addProfPanel.setVisible(true);
            addSchedulePanel.setVisible(false);
            View.setVisible(false);
        }
        else {
          addProfPanel.setVisible(false);
        }
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");
        yearTextField.setText("");
        yearTextField1.setText("");
        selectBachelorComboBox.setSelectedIndex(0);
        otherDegreeCheckBox.setSelected(false);
        updateCourseButton.setEnabled(false);
        if(!otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           selectBachelorLabel.setEnabled(true);
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);
           courseTable.clearSelection();
           selectBachelorComboBox.setEnabled(true);
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearTextField.setEnabled(true);
           yearHintLabel.setEnabled(true);
           
           abbreviateTextField.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);
        }
        coursesComboBox.setSelectedIndex(0);
        yearComboBox.setSelectedIndex(0);
        sectionTextField.setText("");
        courseTable.clearSelection();
        updateSectionButton.setEnabled(false);
        
        updateSubjectButton.setEnabled(false);
        fieldTextField.setText("");
        courseCodeTextField.setText("");
        courseTitleTextField.setText("");
        buttonGroup1.clearSelection();
        lectureTextField.setText("");
        labTextField.setText("");
        subjectTable.clearSelection();
        
        textArea1.setText("");
        
        dayComboBox.setSelectedIndex(0);
        lectRoomTextField.setText("");
        startTimeComboBox1.setSelectedIndex(0);
        startTimeFormatCB1.setSelectedIndex(0);
        endTimeComboBox1.setSelectedIndex(0);
 
        labRoomTextField.setText("");
        startTimeComboBox2.setSelectedIndex(0);
        startTimeFormatCB2.setSelectedIndex(0);
        endTimeComboBox2.setSelectedIndex(0);          
        
    }//GEN-LAST:event_addProfessorButtonActionPerformed

    private void profStatusCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profStatusCBActionPerformed
        // TODO add your handling code here:
        if(profStatusCB.getSelectedItem().equals("Part-Time")) {
            hrs = 12;
            getProfStatus = "Part-Time";
        }else if(profStatusCB.getSelectedItem().equals("Full-Time")) {
            hrs = 16;
            getProfStatus = "Full-Time";
        }else {
            hrs = 0;
            getProfStatus = "";
        }
    }//GEN-LAST:event_profStatusCBActionPerformed

    private void enterProfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterProfButtonActionPerformed
        // TODO add your handling code here:
        total = 0;
        
        String fullName = lastNameTextField.getText() + " " + firstNameTextField.getText();
            if(facultyIDTextField.getText().equals("") || lastNameTextField.getText().equals("") || firstNameTextField.getText().equals("") || profStatusCB.getSelectedItem().equals("None") || profFieldTextField.getText().equals("")){
                JOptionPane.showMessageDialog(null,"Please Complete All the Fields");
            }else{
                    try{
                       
                        String sql = "Select Faculty_ID From FacultyData.Professor where Faculty_ID = ?";
                        PreparedStatement statement = connObj.conObj.prepareStatement(sql);
                        statement.setString(1,facultyIDTextField.getText());
                        connObj.rsObj = statement.executeQuery();
                        if(connObj.rsObj.first()){
                            JOptionPane.showMessageDialog(null, "Faculty ID Already Exist");                        
                        }else{
                          total += hrs;
                          connObj.addProfData(facultyIDTextField.getText(), lastNameTextField.getText(),firstNameTextField.getText(), getProfStatus, profFieldTextField.getText(),hrs,total,fullName);  
                          connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
                          professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));                     

                          connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
                          professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj)); 
                            updateProfButton.setEnabled(false);
                            profStatusCB.setSelectedIndex(0);
                            facultyIDTextField.setText("");
                            firstNameTextField.setText("");
                            lastNameTextField.setText("");
                            profFieldTextField.setText("");
                        }                       
                    }catch(SQLException a){
			a.printStackTrace();
                    }                
            }        
        
        
        
        
    }//GEN-LAST:event_enterProfButtonActionPerformed

    private void clearProfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearProfButtonActionPerformed
        // TODO add your handling code here:
        updateProfButton.setEnabled(false);
        profStatusCB.setSelectedIndex(0);
        facultyIDTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        professorTable.clearSelection();
        profFieldTextField.setText("");
    }//GEN-LAST:event_clearProfButtonActionPerformed
			
			
			//************Adding Schedule Section****************//
    private void addSchedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSchedButtonActionPerformed
        addProfessorButton.setSelected(false);
        addCourseButton.setSelected(false);
        addSubjectButton.setSelected(false);
        viewButton.setSelected(false);
        departmentComboBox.removeAllItems();
        departField();
        if(addSchedButton.isSelected()) {
            addSchedulePanel.setVisible(true);
            addCoursePanel.setVisible(false);
            addSubjectPanel.setVisible(false);
            addProfPanel.setVisible(false);
            View.setVisible(false);
        }else {
            addSchedulePanel.setVisible(false);
        }
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");
        yearTextField.setText("");
        yearTextField1.setText("");
        selectBachelorComboBox.setSelectedIndex(0);
        otherDegreeCheckBox.setSelected(false);
        updateCourseButton.setEnabled(false);
        if(!otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           selectBachelorLabel.setEnabled(true);
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);
           courseTable.clearSelection();
           selectBachelorComboBox.setEnabled(true);
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearTextField.setEnabled(true);
           yearHintLabel.setEnabled(true);
           
           abbreviateTextField.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);
        }
        coursesComboBox.setSelectedIndex(0);
        yearComboBox.setSelectedIndex(0);
        sectionTextField.setText("");
        courseTable.clearSelection();
        updateSectionButton.setEnabled(false);
        
        updateSubjectButton.setEnabled(false);
        fieldTextField.setText("");
        courseCodeTextField.setText("");
        courseTitleTextField.setText("");
        buttonGroup1.clearSelection();
        lectureTextField.setText("");
        labTextField.setText("");
        subjectTable.clearSelection();
        
        updateProfButton.setEnabled(false);
        profStatusCB.setSelectedIndex(0);
        facultyIDTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        professorTable.clearSelection();
        profFieldTextField.setText("");
        
    }//GEN-LAST:event_addSchedButtonActionPerformed

    private String profData = "";
    private String profID = "";
    private void professorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_professorTableMouseClicked
        // TODO add your handling code here:
        updateProfButton.setEnabled(true);
        int i = professorTable.getSelectedRow();
        TableModel model = professorTable.getModel();
        facultyIDTextField.setText(model.getValueAt(i, 0).toString());   
        lastNameTextField.setText(model.getValueAt(i, 1).toString());
        firstNameTextField.setText(model.getValueAt(i, 2).toString());
        profStatusCB.setSelectedItem(model.getValueAt(i, 3).toString());
        profFieldTextField.setText(model.getValueAt(i, 4).toString());
        profData = model.getValueAt(i, 0).toString() + " - " + model.getValueAt(i, 1).toString() + " - " + model.getValueAt(i, 2).toString() + " - " + model.getValueAt(i, 3).toString() + " - " + model.getValueAt(i, 4).toString();
        profID = model.getValueAt(i, 0).toString();
    }//GEN-LAST:event_professorTableMouseClicked
    
    private String prof = "";
    private void profSchedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profSchedButtonActionPerformed
        // TODO add your handling code here:
        //textArea1.insert(alternativeList.getSelectedValue(),198 + lecRoomCount + labRoomCount + courseTitle.length());
        int avlTime = 0;
        ResultSet rs3 = null;
        int lecLab = totalLecResult + totalLabResult;
        try{
           PreparedStatement prepState = null;
           prepState = connObj.conObj.prepareStatement("Select * From facultydata.professor where fullname = ?");
           prepState.setString(1, alternativeList.getSelectedValue().toString());
           rs3 = prepState.executeQuery();
           rs3.first();
           avlTime = Integer.parseInt(rs3.getString("Available"));
            if(avlTime < lecLab){
               JOptionPane.showMessageDialog(null,"The Selected Professor has not enough time");
            }else{
                prof = alternativeList.getSelectedValue().toString();
                textArea1.append("\n\nProfessor: "+prof);
                profSchedButton.setEnabled(false);                         
            }  
        }catch(SQLException e){
          e.printStackTrace();  
        }
     
       
    }//GEN-LAST:event_profSchedButtonActionPerformed

    private void departmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentComboBoxActionPerformed
        // TODO add your handling code here:
        dlm.clear();
        alternativeList.setModel(dlm);
        String stats = "";
        String profName = "";
        try{
            String sql = "SELECT * FROM FACULTYDATA.Professor WHERE Field = ? AND Available > 2";
            PreparedStatement statement = connObj.conObj.prepareStatement(sql);
            statement.setString(1,(String)departmentComboBox.getSelectedItem());
            ResultSet set = statement.executeQuery();
            while(set.next()){
                profName = set.getString("Fullname");
              //  stats = set.getString("Status");
                dlm.addElement(profName);
            }

        }catch(SQLException e){
            e.printStackTrace();
        }
        alternativeList.setModel(dlm);

    }//GEN-LAST:event_departmentComboBoxActionPerformed

    private void courseCodeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseCodeComboBoxActionPerformed
        // TODO add your handling code here:
        boolean descriptionExist = true;
        try{
            String sql = "SELECT * FROM FACULTYDATA.Subject WHERE Code = ?";
            PreparedStatement statement = connObj.conObj.prepareStatement(sql);
            statement.setString(1,(String)courseCodeComboBox.getSelectedItem());
            ResultSet set = statement.executeQuery();
            descriptionExist = set.first();
            if(descriptionExist){
                descriptionField.setText(set.getString("Course_Title"));
            }else{
                descriptionField.setText("Course Title");
            }
        }catch(SQLException e){
            e.printStackTrace();
        }

        try{
            String sql = "SELECT Lab FROM FACULTYDATA.Subject WHERE Code = ?";
            PreparedStatement statement = connObj.conObj.prepareStatement(sql);
            statement.setString(1,(String)courseCodeComboBox.getSelectedItem());
            ResultSet set = statement.executeQuery();
            set.next();
         
        }catch(SQLException e){
            e.printStackTrace();

        }

    }//GEN-LAST:event_courseCodeComboBoxActionPerformed

    private void clearScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearScheduleButtonActionPerformed
        // TODO add your handling code here:
        yrSecComboBox.setSelectedIndex(0);
        courseCodeComboBox.setSelectedIndex(0);
        textArea1.setText(textArea1.getText().replaceAll("Course, Year & Section: " + yearSection, ""));
        textArea1.setText(textArea1.getText().replaceAll("\n\nCourse Code: " + courseCode, ""));
        textArea1.setText(textArea1.getText().replaceAll("\n\nCourse Title: " + courseTitle, ""));
        courseScheduleButton.setEnabled(true);
        roomScheduleButton.setEnabled(false);
    }//GEN-LAST:event_clearScheduleButtonActionPerformed

    private void yrSecComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yrSecComboBoxActionPerformed
        try{
            String sql = "SELECT * FROM FACULTYDATA.COURSE WHERE COURSE_Year_Section = ?";
            PreparedStatement statement = connObj.conObj.prepareStatement(sql);
            statement.setString(1,(String)yrSecComboBox.getSelectedItem());
            ResultSet set = statement.executeQuery();
            getSectCode = String.valueOf(yrSecComboBox.getSelectedItem());
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_yrSecComboBoxActionPerformed
    private int countText = 0;
    private String courseTitle = "";
    
    private void courseScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseScheduleButtonActionPerformed
        // TODO add your handling code here...
        ArrayList<String> courseCodeList = new ArrayList<>();
        boolean checkCourseCode = true;
        getCourseCode = (String)yrSecComboBox.getSelectedItem()+(String)courseCodeComboBox.getSelectedItem();     
        yearSection =  (String)yrSecComboBox.getSelectedItem();
        courseCode = (String)courseCodeComboBox.getSelectedItem(); 
        courseTitle = descriptionField.getText();
        try{
           connObj.rsObj = connObj.stateObj.executeQuery("Select * From FacultyData.Schedule");
           while(connObj.rsObj.next()){
               courseCodeList.add(connObj.rsObj.getString("Course_Section_Code"));
           }
        }catch(SQLException e){
            e.printStackTrace();
        }
        for(int i = 0; i < courseCodeList.size(); i++){
            if(getCourseCode.equals(courseCodeList.get(i))){
                checkCourseCode = false;
            }else{
                checkCourseCode = true;
            }
        }
        if(checkCourseCode){
            textArea1.append("Course, Year & Section: " + yearSection);
            textArea1.append("\n\nCourse Code: " + courseCode);
            textArea1.append("\n\nCourse Title: " + courseTitle);
       
        }else{
            JOptionPane.showMessageDialog(null,"Course, Section and Code Already Exist");          
        }
        

                         
        courseScheduleButton.setEnabled(false);
        roomScheduleButton.setEnabled(true);

    }//GEN-LAST:event_courseScheduleButtonActionPerformed

    private void otherDegreeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherDegreeCheckBoxActionPerformed
        // TODO add your handling code here:
        if(otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(true);
           bachelorNameTextField.setEnabled(true);
           bachelorHintLabel.setEnabled(true);
           abbreviateLabel.setEnabled(true);
           abbreviateTextField.setEnabled(true);
           yearLabel1.setEnabled(true);
           yearTextField1.setEnabled(true);
           yearHintLabel1.setEnabled(true);
           
           abbreviateHintLabel.setEnabled(true);
           selectBachelorLabel.setEnabled(false);
           selectBachelorComboBox.setEnabled(false);
           yearTextField.setEnabled(false);
           jLabel11.setEnabled(false);
           yearLabel.setEnabled(false);
           yearHintLabel.setEnabled(false);
           jTextField1.setEnabled(false);
        }else{
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateTextField.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);         
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);          
           selectBachelorLabel.setEnabled(true);
           selectBachelorComboBox.setEnabled(true);
           yearTextField.setEnabled(true); 
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearHintLabel.setEnabled(true); 
           jTextField1.setEnabled(true);
        }
    }//GEN-LAST:event_otherDegreeCheckBoxActionPerformed
    private int totalLecResult = 0;
    private int totalLabResult = 0;
    private int lecRoomCount = 0;
    private int labRoomCount = 0;
    private String lecTime = "";
    private String labTime = "";
    private String lecInTime = "";
    private String lecOutTime = "";
    private String labInTime = "";
    private String labOutTime = "";
    private String lecInSched = "";
    private String lecOutSched = "";
    private String labInSched = "";
    private String labOutSched = "";
    
    
    private void roomScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomScheduleButtonActionPerformed
        // TODO add your handling code here:
        int lecInResult = 0;
        int lecOutResult = 0;
        int labInResult = 0;
        int labOutResult = 0;
        int copyLabInResult = 0;
        int copyLabOutResult = 0;
        int copyLecInResult = 0;
        int copyLecOutResult = 0;        
        String copyLecInFormat = "";
        String copyLecOutFormat = "";
        String copyLabInFormat = "";
        String copyLabOutFormat = ""; 
        boolean labCheck = true;
        boolean lecCheck = true;
        boolean lecLabCheck = true;
        boolean labLecCheck = true;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
        ResultSet rs3 = null;
        int avlTime = 0;
        int timeTotal = 0;
        int lecLab = totalLecResult + totalLabResult;        
        
        day = (String)dayComboBox.getSelectedItem();
        
        lectureRoom = lectRoomTextField.getText();        
        lecIn = (String)startTimeComboBox1.getSelectedItem() + (String)startTimeFormatCB1.getSelectedItem();
        lecOut = (String)endTimeComboBox1.getSelectedItem() + (String)endTimeFormatCB1.getSelectedItem();
        laboratoryRoom = labRoomTextField.getText();
        labIn = (String)startTimeComboBox2.getSelectedItem() + (String)startTimeFormatCB2.getSelectedItem();
        labOut = (String)endTimeComboBox2.getSelectedItem() + (String)endTimeFormatCB2.getSelectedItem(); 
        
        lecInSched = (String)startTimeComboBox1.getSelectedItem() + (String)startTimeFormatCB1.getSelectedItem();
        lecOutSched = (String)endTimeComboBox1.getSelectedItem() + (String)endTimeFormatCB1.getSelectedItem();
        labInSched = (String)startTimeComboBox2.getSelectedItem() + (String)startTimeFormatCB2.getSelectedItem();
        labOutSched = (String)endTimeComboBox2.getSelectedItem() + (String)endTimeFormatCB2.getSelectedItem(); 
        
        lecture = lectureRoom + " " + lecIn + " " + lecOut;
        laboratory = laboratoryRoom + " " + labIn + " " + labOut;        
        lecInTime = lecIn;
        lecOutTime = lecOut;
        labInTime = labIn;
        labOutTime = labOut;
        lecTime = lecIn + "-" + lecOut;
        labTime = labIn + "-" + labOut;
        String dayCount = (String)dayComboBox.getSelectedItem();
        lecRoomCount = lectRoomTextField.getText().length();
        labRoomCount = labRoomTextField.getText().length();
        totalLecResult = 0;
        totalLabResult = 0;
        String lecInFormat = lecInTime.substring(lecInTime.length() -2);
        lecInTime = lecInTime.substring(0, lecIn.length() - 2);
        String[] lecInSplit = lecInTime.split(":");
        String lecInContainer = "";
        for(String temp: lecInSplit){
            lecInContainer += temp;
        }    // Removes Single Character/Symbol
        int lecInConverted = Integer.parseInt(lecInContainer);                           
        switch(lecInFormat){
            case "AM":
                lecInResult += lecInConverted;
            break;
            case "PM":
                if(lecInConverted >= 1200 && lecInConverted <= 1300){
                  lecInResult += lecInConverted;  
                }else{
                  lecInResult = lecInConverted + 1200;  
                }
            break;     
        }

        String lecOutFormat = lecOutTime.substring(lecOutTime.length() - 2);
        lecOutTime = lecOutTime.substring(0,lecOutTime.length() - 2);
        String lecOutSplit[] = lecOutTime.split(":");
        String lecOutContainer = "";      
        for(String temp: lecOutSplit){
            lecOutContainer += temp;
        }    // Removes Single Character/Symbol             
        int lecOutConverted = Integer.parseInt(lecOutContainer);

        switch(lecOutFormat){
            case "AM":
                lecOutResult += lecOutConverted;
            break;
            case "PM":
                if(lecOutConverted >= 1200 && lecOutConverted <= 1300){
                   lecOutResult += lecOutConverted;
                }else{
                   lecOutResult = lecOutConverted + 1200;
                }
            break;
        }

        String labInFormat = labInTime.substring(labInTime.length() - 2);
        labInTime = labInTime.substring(0,labIn.length() - 2);
        String labInSplit[] = labInTime.split(":");
        String labInContainer = "";
        for(String temp: labInSplit){
            labInContainer += temp;
        }    // Removes Single Character/Symbol
        int labInConverted = Integer.parseInt(labInContainer);

        switch(labInFormat){
            case "AM":
                labInResult += labInConverted;
            break;
            case "PM":
                if(labInConverted >= 1200 && labInConverted <= 1300){
                    labInResult += labInConverted;
                }else{
                    labInResult = labInConverted + 1200; 
                }
            break;     
        } // Checking the Time Format... 
        String labOutFormat = labOutTime.substring(labOutTime.length() - 2);
        labOutTime = labOutTime.substring(0, labOutTime.length() - 2);
        String labOutSplit[] = labOutTime.split(":");
        String labOutContainer = "";
        for(String temp: labOutSplit){
            labOutContainer += temp;
        }    // Removes Single Character/Symbol
        int labOutConverted = Integer.parseInt(labOutContainer);

        switch(labOutFormat){
            case "AM":
                labOutResult += labOutConverted;
            break;
            case "PM":
                if(labOutConverted >= 1200 && labOutConverted <= 1300){
                    labOutResult = labOutConverted; 
                }else{
                    labOutResult += labOutConverted + 1200;
                }                                    
            break;
        }// Checking the Time Format... 
        
        boolean schoolCheck = true;
        boolean schoolCheck1 = true;


        
       
        if(!lectureRoom.equals("") || !laboratoryRoom.equals("")){
            if(lecInResult <= labInResult && labInResult >= lecOutResult || lecInResult >= labInResult && labOutResult <= lecInResult){
                if((startTimeComboBox1.getSelectedIndex() == 0 || endTimeComboBox1.getSelectedIndex() == 0) && (startTimeComboBox2.getSelectedIndex() == 0 || endTimeComboBox2.getSelectedIndex() == 0)){
                    JOptionPane.showMessageDialog(null, "Select your Start Time and End Time");
                }else{
                    roomScheduleButton.setEnabled(false);
                    textArea1.append("\n\nDay: " + day);
                    if(!lectureRoom.equals("")){
                        if(730 > lecInResult || lecInResult > 2100){
                            JOptionPane.showMessageDialog(null,"School is Still Close");
                        }else if(lecOutResult < 730 || lecOutResult > 2100){
                            JOptionPane.showMessageDialog(null, "Lecture Exceed School Hours");
                        }else{
                            textArea1.append("\n\nLecture Room: " + lectureRoom);
                            textArea1.append("\n\nTime: " + lecTime);
                     }  
                    }

                    if(!laboratoryRoom.equals("")){
                        if(730> labInResult || labInResult > 2100){
                            JOptionPane.showMessageDialog(null,"School is Still Close");
                        }else if (labOutResult < 730 || labOutResult > 2100){
                            JOptionPane.showMessageDialog(null, "Laboratory Exceed School Hours");
                        }else{
                            textArea1.append("\n\nLaboratory Room: " + laboratoryRoom);
                            textArea1.append("\n\nTime: " + labTime);
                        }        
                    }                     
                }
                    
                totalLecResult = (lecOutResult - lecInResult) / 100;
                totalLabResult = (labOutResult - labInResult) / 100;
            }else{
               JOptionPane.showMessageDialog(null,"Conflict");
            } 
        }else{
            JOptionPane.showMessageDialog(null,"Please Input the Lecture Room or the Laboratory Room");
        }     
  
    }//GEN-LAST:event_roomScheduleButtonActionPerformed

    private void clearRoomFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRoomFieldActionPerformed
        // TODO add your handling code here:
        roomScheduleButton.setEnabled(true);
        textArea1.setText(textArea1.getText().replaceAll("\n\nDay: " + day, ""));
        textArea1.setText(textArea1.getText().replaceAll("\n\nLecture Room: " + lectureRoom, ""));
        textArea1.setText(textArea1.getText().replaceAll("\n\nTime: " + lecTime, ""));      
        textArea1.setText(textArea1.getText().replaceAll("\n\nLaboratory Room: " + laboratoryRoom, ""));
        textArea1.setText(textArea1.getText().replaceAll("\n\nTime: " + labTime, ""));
        
        dayComboBox.setSelectedIndex(0);
        lectRoomTextField.setText("");
        startTimeComboBox1.setSelectedIndex(0);
        startTimeFormatCB1.setSelectedIndex(0);   
        endTimeComboBox1.setSelectedIndex(0);
        endTimeFormatCB1.setSelectedIndex(0);         
 
        labRoomTextField.setText("");
        startTimeComboBox2.setSelectedIndex(0);
        startTimeFormatCB2.setSelectedIndex(0);
        endTimeComboBox2.setSelectedIndex(0);            
        endTimeFormatCB2.setSelectedIndex(0);
      
    }//GEN-LAST:event_clearRoomFieldActionPerformed

    private void enterProfSchedButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterProfSchedButton1ActionPerformed
//        copyLecInArray = new ArrayList();
//        copyLecOutArray = new ArrayList();
//        copyLabInArray = new ArrayList();
//        copyLabOutArray = new ArrayList();
//        String lecIn = (String)startTimeComboBox1.getSelectedItem() + (String)startTimeFormatCB1.getSelectedItem();
//        String lecOut = (String)endTimeComboBox1.getSelectedItem() + (String)endTimeFormatCB1.getSelectedItem();
//        String labIn = (String)startTimeComboBox2.getSelectedItem() + (String)startTimeFormatCB2.getSelectedItem();
//        String labOut = (String)endTimeComboBox2.getSelectedItem() + (String)endTimeFormatCB2.getSelectedItem();
        int lecInResult = 0;
        int lecOutResult = 0;
        int labInResult = 0;
        int labOutResult = 0;
        int copyLabInResult = 0;
        int copyLabOutResult = 0;
        int copyLecInResult = 0;
        int copyLecOutResult = 0;        
        String copyLecInFormat = "";
        String copyLecOutFormat = "";
        String copyLabInFormat = "";
        String copyLabOutFormat = ""; 
        boolean labCheck = true;
        boolean lecCheck = true;
        boolean lecLabCheck = true;
        boolean labLecCheck = true;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
        ResultSet rs3 = null;
        int avlTime = 0;
        int timeTotal = 0;
        int lecLab = totalLecResult + totalLabResult;
           
        try{  
           PreparedStatement prepState = null;
           prepState = connObj.conObj.prepareStatement("Select * From facultydata.professor where fullname = ?");
           prepState.setString(1, prof);
           rs3 = prepState.executeQuery();
           rs3.first();
           avlTime = Integer.parseInt(rs3.getString("Available"));
           timeTotal = avlTime - (totalLecResult + totalLabResult);

           connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.schedule");          
           if(connObj.rsObj.next() == false){                 
               prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.schedule VALUES(?,?,?,?,?,?,?)");
               prepState.setString(1, getCourseCode);
               prepState.setString(2, courseTitle);
               prepState.setString(3, day);
               prepState.setString(4, lecture);
               prepState.setString(5, laboratory);
               prepState.setString(6, prof);
               prepState.setString(7, courseCode);
               prepState.execute(); 
               if(!lectureRoom.equals("")){
                   prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.lecSched VALUES(?,?,?,?,?)");
                   prepState.setString(1, getCourseCode);
                   prepState.setString(2, day);
                   prepState.setString(3, lectureRoom);
                   prepState.setString(4, lecIn);
                   prepState.setString(5, lecOut);
                   prepState.execute();    
               }

               if(!laboratoryRoom.equals("")){
                   prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.labSched VALUES(?,?,?,?,?)");
                   prepState.setString(1, getCourseCode);
                   prepState.setString(2, day);
                   prepState.setString(3, laboratoryRoom);
                   prepState.setString(4, labIn);
                   prepState.setString(5, labOut);
                   prepState.execute();                    
               }
               
               prepState = connObj.conObj.prepareStatement("UPDATE FacultyData.Professor SET Available = ? WHERE Fullname = ?");
               prepState.setInt(1,timeTotal);
               prepState.setString(2,prof);
               prepState.execute();
               connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Section_Code, Course_Title, Day, Lecture, Laboratory, Professor From FacultyData.Schedule");
               scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));               
                JOptionPane.showMessageDialog(null, "Success");
                courseScheduleButton.setEnabled(true);
                roomScheduleButton.setEnabled(true);
                profSchedButton.setEnabled(true);
                textArea1.setText(null);             
              
           }else{
               prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.lecsched WHERE Day = ? AND Lecture = ?");
               prepState.setString(1, day);
               prepState.setString(2, lectureRoom);
               rs1 = prepState.executeQuery();
               prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.labsched WHERE Day = ? AND Laboratory = ?");
               prepState.setString(1, day);
               prepState.setString(2, laboratoryRoom);
               rs2 = prepState.executeQuery();
               
               if(rs1.next() == false && rs2.next() == false){                      
                   prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.schedule VALUES(?,?,?,?,?,?,?)");
                   prepState.setString(1, getCourseCode);
                   prepState.setString(2, courseTitle);
                   prepState.setString(3, day);
                   prepState.setString(4, lecture);
                   prepState.setString(5, laboratory);
                   prepState.setString(6, prof);
                   prepState.setString(7, courseCode);
                   prepState.execute();

                   if(!lectureRoom.equals("")){
                       prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.lecSched VALUES(?,?,?,?,?)");
                       prepState.setString(1, getCourseCode);
                       prepState.setString(2, day);
                       prepState.setString(3, lectureRoom);
                       prepState.setString(4, lecIn);
                       prepState.setString(5, lecOut);
                       prepState.execute();                       
                   }
                 
                   if(!laboratoryRoom.equals("")){
                       prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.labSched VALUES(?,?,?,?,?)");
                       prepState.setString(1, getCourseCode);
                       prepState.setString(2, day);
                       prepState.setString(3, laboratoryRoom);
                       prepState.setString(4, labIn);
                       prepState.setString(5, labOut);
                       prepState.execute();                        
                   }
                   
                   prepState = connObj.conObj.prepareStatement("UPDATE FacultyData.Professor SET Available = ? WHERE Fullname = ?");
                   prepState.setInt(1,timeTotal);
                   prepState.setString(2,prof);
                   prepState.execute();
                   connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Section_Code, Course_Title, Day, Lecture, Laboratory, Professor From FacultyData.Schedule");
                   scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
                   JOptionPane.showMessageDialog(null, "Success");
                    courseScheduleButton.setEnabled(true);
                    roomScheduleButton.setEnabled(true);
                    profSchedButton.setEnabled(true);                   
                    textArea1.setText(null);              
                }else{
                  //  JOptionPane.showMessageDialog(null,"Has Item");

                   prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.lecSched WHERE Day = ? AND Lecture = ?");
                   prepState.setString(1, day);
                   prepState.setString(2, lectureRoom);
                   rs1 = prepState.executeQuery();                      
                    while(rs1.next()){
                        copyLecInResult = 0;
                        copyLecOutResult = 0;
                        String copyLecIn = rs1.getString("TimeIn");
                        copyLecInFormat = copyLecIn.substring(copyLecIn.length() -2);
                        copyLecIn = copyLecIn.substring(0,copyLecIn.length() - 2);
                        String copyLecInSplit[] = copyLecIn.split(":");
                        String copyLecInContainer = "";
                        for(String temp: 
                                copyLecInSplit){
                            copyLecInContainer += temp;
                        }    // Removes Single Character/Symbol
                        int copyLecInConverted = Integer.parseInt(copyLecInContainer);
                        switch(copyLecInFormat){
                            case "AM":
                                copyLecInResult += copyLecInConverted;
                                copyLecInArray.add(copyLecInResult); 
                            break;
                            case "PM":
                                if(copyLecInConverted >= 1200 && copyLecInConverted <= 1300){
                                    copyLecInResult += copyLecInConverted;
                                    copyLecInArray.add(copyLecInResult);
                                }else{                                  
                                    copyLecInResult = copyLecInConverted + 1200;
                                    copyLecInArray.add(copyLecInResult);                                              
                                }
                            break;     
                        } // Checking the Time Format

                        String copyLecOut = rs1.getString("TimeOut"); 
                        copyLecOutFormat = copyLecOut.substring(copyLecOut.length() - 2);
                        copyLecOut = copyLecOut.substring(0, copyLecOut.length() - 2);
                        String copyLecOutSplit[] = copyLecOut.split(":");
                        String copyLecOutContainer = "";      
                        for(String temp: copyLecOutSplit){
                            copyLecOutContainer += temp;
                        }    // Removes Single Character/Symbol             
                        int copyLecOutConverted = Integer.parseInt(copyLecOutContainer);
                        switch(copyLecOutFormat){
                            case "AM":       
                                copyLecOutResult += copyLecOutConverted;
                                copyLecOutArray.add(copyLecOutResult);
                            break;
                            case "PM":
                                if(copyLecOutConverted >= 1200 && copyLecOutConverted <= 1300){
                                    copyLecOutResult += copyLecOutConverted;
                                    copyLecOutArray.add(copyLecOutResult);
                                }else{
                                    copyLecOutResult = copyLecOutConverted + 1200;
                                    copyLecOutArray.add(copyLecOutResult);    
                                }
                            break;
                        }}    
                    
                   prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.labSched WHERE Day = ? AND Laboratory = ?");
                   prepState.setString(1, day);
                   prepState.setString(2, laboratoryRoom);
                   rs2 = prepState.executeQuery();
                   while(rs2.next()){
                        copyLabInResult = 0;
                        copyLabOutResult = 0;
                            
                        String copyLabIn = rs2.getString("TimeIn");
                        copyLabInFormat = copyLabIn.substring(copyLabIn.length() - 2);
                        copyLabIn = copyLabIn.substring(0, copyLabIn.length() - 2);
                        String copyLabInSplit[] = copyLabIn.split(":");
                        String copyLabInContainer = "";
                        for(String temp: copyLabInSplit){
                            copyLabInContainer += temp;
                        }    // Removes Single Character/Symbol
                         int copyLabInConverted = Integer.parseInt(copyLabInContainer);
                        
                        switch(copyLabInFormat){
                            case "AM":
                                copyLabInResult += copyLabInConverted;
                                copyLabInArray.add(copyLabInResult);
                            break;
                            case "PM":
                                if(copyLabInConverted >= 1200 && copyLabInConverted <= 1300){
                                   copyLabInResult += copyLabInConverted;
                                   copyLabInArray.add(copyLabInResult);
                                }else{
                                   copyLabInResult = copyLabInConverted + 1200;
                                   copyLabInArray.add(copyLabInResult);
                                }                                             
                            break;     
                        } // Checking the Time Format... 

                        String copyLabOut = rs2.getString("TimeOut");
                        copyLabOutFormat = copyLabOut.substring(copyLabOut.length() - 2);
                        copyLabOut = copyLabOut.substring(0,copyLabOut.length() - 2);
                        String copyLabOutSplit[] = copyLabOut.split(":");
                        String copyLabOutContainer = "";
                        for(String temp: copyLabOutSplit){
                            copyLabOutContainer += temp;
                        }    // Removes Single Character/Symbol
                        int copyLabOutConverted = Integer.parseInt(copyLabOutContainer);

                        switch(copyLabOutFormat){
                            case "AM":
                                copyLabOutResult += copyLabOutConverted;
                                copyLabOutArray.add(copyLabOutResult);                               
                            break;
                            case "PM":
                                if(copyLabOutConverted >= 1200 && copyLabOutConverted <= 1300){
                                    copyLabOutResult += copyLabOutConverted;
                                    copyLabOutArray.add(copyLabOutResult);
                                }else{
                                    copyLabOutResult = copyLabOutConverted + 1200;
                                    copyLabOutArray.add(copyLabOutResult);
                                }
                            break;     
                        }
                   }
                   String lecInFormat = lecIn.substring(lecIn.length() -2);
                   lecInSched = lecInSched.substring(0, lecInSched.length() - 2);
                   String[] lecInSplit = lecInSched.split(":");
                   String lecInContainer = "";
                   for(String temp: lecInSplit){
                        lecInContainer += temp;
                   }    // Removes Single Character/Symbol
                   int lecInConverted = Integer.parseInt(lecInContainer);                           
                   switch(lecInFormat){
                       case "AM":
                           lecInResult += lecInConverted;
                       break;
                       case "PM":
                           if(lecInConverted >= 1200 && lecInConverted <= 1300){
                             lecInResult += lecInConverted;  
                           }else{
                              lecInResult = lecInConverted + 1200;  
                           }
                       break;     
                   }

                    String lecOutFormat = lecOut.substring(lecOut.length() - 2);
                    lecOut = lecOut.substring(0,lecOut.length() - 2);
                    String lecOutSplit[] = lecOut.split(":");
                    String lecOutContainer = ""; 
                    for(String temp: lecOutSplit){
                        lecOutContainer += temp;
                    }    // Removes Single Character/Symbol             
                    int lecOutConverted = Integer.parseInt(lecOutContainer);
                    switch(lecOutFormat){
                        case "AM":
                            lecOutResult += lecOutConverted;
                        break;
                        case "PM":
                            if(lecOutConverted >= 1200 && lecOutConverted <= 1300){
                               lecOutResult += lecOutConverted;
                            }else{
                               lecOutResult = lecOutConverted + 1200;
                            }
                        break;
                    }

                    String labInFormat = labIn.substring(labIn.length() - 2);
                    labIn = labIn.substring(0,labIn.length() - 2);
                    String labInSplit[] = labIn.split(":");
                    String labInContainer = "";
                    for(String temp: labInSplit){
                        labInContainer += temp;
                    }    // Removes Single Character/Symbol
                    int labInConverted = Integer.parseInt(labInContainer);
                    switch(labInFormat){
                        case "AM":
                            labInResult += labInConverted;
                        break;
                        case "PM":
                            if(labInConverted >= 1200 && labInConverted <= 1300){
                                labInResult += labInConverted;
                            }else{
                                labInResult = labInConverted + 1200; 
                            }
                        break;     
                    } // Checking the Time Format... 
                    String labOutFormat = labOutSched.substring(labOutSched.length() - 2);
                    labOutSched = labOutSched.substring(0, labOutSched.length() - 2);
                    String labOutSplit[] = labOutSched.split(":");
                    String labOutContainer = "";
                    for(String temp: labOutSplit){
                        labOutContainer += temp;
                    }    // Removes Single Character/Symbol
                    int labOutConverted = Integer.parseInt(labOutContainer);
                    switch(labOutFormat){
                        case "AM":
                            labOutResult += labOutConverted;
                        break;
                        case "PM":
                            if(labOutConverted >= 1200 && labOutConverted <= 1300){
                                labOutResult = labOutConverted; 
                            }else{
                                labOutResult += labOutConverted + 1200;
                            }                                    
                        break;     
                    }// Checking the Time Format... 
                    if(!lectureRoom.equals("")){
                        for(int i = 0; i < copyLecInArray.size(); i++){
                            if(lecInResult <= copyLecInArray.get(i) && copyLecInArray.get(i) >= lecOutResult || lecInResult >= copyLecInArray.get(i) && copyLecOutArray.get(i) <= lecInResult){
                                lecCheck = true;                                                                                  
                             }else{ 
                                lecCheck = false;  
                        }}                         
                    }
 
                   if(!laboratoryRoom.equals("")){
                      for(int i = 0; i < copyLabInArray.size(); i++){
                        if(labInResult <= copyLabInArray.get(i) && copyLabInArray.get(i) >= labOutResult || labInResult >= copyLabInArray.get(i) && copyLabOutArray.get(i) <= labInResult){
                           labCheck = true;
                        }else{
                           labCheck = false; 
                        }
                      }}
              
                   if(lecCheck && labCheck){                         
                        prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.schedule VALUES(?,?,?,?,?,?,?)");
                        prepState.setString(1, getCourseCode);
                        prepState.setString(2, courseTitle);
                        prepState.setString(3, day);
                        prepState.setString(4, lecture);
                        prepState.setString(5, laboratory);
                        prepState.setString(6, prof);
                        prepState.setString(7, courseCode);
                        prepState.execute();
                        
                        if(!lectureRoom.equals("")){
                            prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.lecSched VALUES(?,?,?,?,?)");
                            prepState.setString(1, getCourseCode);
                            prepState.setString(2, day);
                            prepState.setString(3, lectureRoom);
                            prepState.setString(4, lecInTime);
                            prepState.setString(5, lecOutTime);
                            prepState.execute();                          
                        }

                        if(!laboratoryRoom.equals("")){
                            prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.labSched VALUES(?,?,?,?,?)");
                            prepState.setString(1, getCourseCode);
                            prepState.setString(2, day);
                            prepState.setString(3, laboratoryRoom);
                            prepState.setString(4, labInTime);
                            prepState.setString(5, labOutTime);
                            prepState.execute();    
                        }

                        prepState = connObj.conObj.prepareStatement("UPDATE FacultyData.Professor SET Available = ? WHERE Fullname = ?");
                        prepState.setInt(1,timeTotal);
                        prepState.setString(2,prof);
                        prepState.execute();  
                        connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Section_Code, Course_Title, Day, Lecture, Laboratory, Professor From FacultyData.Schedule");
                        scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
                        JOptionPane.showMessageDialog(null, "Success");
                         courseScheduleButton.setEnabled(true);
                         roomScheduleButton.setEnabled(true);
                         profSchedButton.setEnabled(true);
                         textArea1.setText(null);                
                    }else{
                        JOptionPane.showMessageDialog(null,"Conflict");
                    }  
                
                }    
            }            
       
         connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
            professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
        }catch(SQLException e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_enterProfSchedButton1ActionPerformed

    private void clearSchedButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSchedButton1ActionPerformed
        // TODO add your handling code here:
        textArea1.setText(textArea1.getText().replaceAll("\n\nProfessor: " + prof, ""));
        profSchedButton.setEnabled(true);
        
    }//GEN-LAST:event_clearSchedButton1ActionPerformed

    private void selectBachelorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBachelorComboBoxActionPerformed

        if(selectBachelorComboBox.getSelectedItem().equals("Bachelor of Science in Information Technology")){
            jTextField1.setText("BSIT");
        }else if (selectBachelorComboBox.getSelectedItem().equals("Bachelor of Science in Accountancy")){
            jTextField1.setText("BSA"); 
        }else if(selectBachelorComboBox.getSelectedItem().equals("Bachelor of Science in Hospitality Management")){
            jTextField1.setText("BSHM"); 
        }else if(selectBachelorComboBox.getSelectedItem().equals("Bachelor of Science in Financial Management")){
            jTextField1.setText("BSFM");
        }else if(selectBachelorComboBox.getSelectedItem().equals("Bachelor of Science in Entrepreneurship")){
            jTextField1.setText("BSENT");
        }else if(selectBachelorComboBox.getSelectedItem().equals("Bachelor of Secondary Education")){
            jTextField1.setText("BSED");
        }
        
    }//GEN-LAST:event_selectBachelorComboBoxActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        
        addProfessorButton.setSelected(false);
        addCourseButton.setSelected(false);
        addSubjectButton.setSelected(false);
        addSchedButton.setSelected(false);
        if(viewButton.isSelected()){
           View.setVisible(true);
           addSchedulePanel.setVisible(false);
           addCoursePanel.setVisible(false);
           addSubjectPanel.setVisible(false);
           addProfPanel.setVisible(false);
           
        }else{
           View.setVisible(false); 
        }
        bachelorNameTextField.setText("");
        abbreviateTextField.setText("");
        yearTextField.setText("");
        yearTextField1.setText("");
        selectBachelorComboBox.setSelectedIndex(0);
        otherDegreeCheckBox.setSelected(false);
        updateCourseButton.setEnabled(false);
        if(!otherDegreeCheckBox.isSelected()){
           bachelorLabel.setEnabled(false);
           bachelorNameTextField.setEnabled(false);
           bachelorHintLabel.setEnabled(false);
           selectBachelorLabel.setEnabled(true);
           yearLabel1.setEnabled(false);
           yearTextField1.setEnabled(false);
           yearHintLabel1.setEnabled(false);
           courseTable.clearSelection();
           selectBachelorComboBox.setEnabled(true);
           jLabel11.setEnabled(true);
           yearLabel.setEnabled(true);
           yearTextField.setEnabled(true);
           yearHintLabel.setEnabled(true);
           
           abbreviateTextField.setEnabled(false);
           abbreviateLabel.setEnabled(false);
           abbreviateHintLabel.setEnabled(false);
        }
        coursesComboBox.setSelectedIndex(0);
        yearComboBox.setSelectedIndex(0);
        sectionTextField.setText("");
        courseTable.clearSelection();
        updateSectionButton.setEnabled(false);
        
        updateSubjectButton.setEnabled(false);
        fieldTextField.setText("");
        courseCodeTextField.setText("");
        courseTitleTextField.setText("");
        buttonGroup1.clearSelection();
        lectureTextField.setText("");
        labTextField.setText("");
        subjectTable.clearSelection();
        
        updateProfButton.setEnabled(false);
        profStatusCB.setSelectedIndex(0);
        facultyIDTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        professorTable.clearSelection();
        profFieldTextField.setText("");
        
        dayComboBox.setSelectedIndex(0);
        lectRoomTextField.setText("");
        startTimeComboBox1.setSelectedIndex(0);
        startTimeFormatCB1.setSelectedIndex(0);
        endTimeComboBox1.setSelectedIndex(0);

        textArea1.setText("");
        
        labRoomTextField.setText("");
        startTimeComboBox2.setSelectedIndex(0);
        startTimeFormatCB2.setSelectedIndex(0);
        endTimeComboBox2.setSelectedIndex(0);          
        
    }//GEN-LAST:event_viewButtonActionPerformed

    private void updateProfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProfButtonActionPerformed
        // TODO add your handling code here:
        updateProfButton.setEnabled(false);
        try{
            PreparedStatement prepState = null;      
            prepState = connObj.conObj.prepareStatement("Update Facultydata.professor SET LastName = ?, FirstName = ?, Field = ?, Fullname = ? WHERE FACULTY_ID = ?");
            prepState.setString(1,lastNameTextField.getText());
            prepState.setString(2,firstNameTextField.getText());
            prepState.setString(3,profFieldTextField.getText());           
            prepState.setString(4,lastNameTextField.getText() + " " + firstNameTextField.getText());
            prepState.setString(5, facultyIDTextField.getText());
            prepState.execute();
             
            connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
            professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj)); 
            professorTable.clearSelection();
             
        }catch(SQLException e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_updateProfButtonActionPerformed
    private int lab2 = 0;
    private String coded = "";
    
    private void subjectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectTableMouseClicked
        // TODO add your handling code here:
        updateSubjectButton.setEnabled(true);
        int i = subjectTable.getSelectedRow();
        TableModel model = subjectTable.getModel();
        coded = model.getValueAt(i, 1).toString();
        courseCodeTextField.setText(coded);   
        courseTitleTextField.setText(model.getValueAt(i, 2).toString());
        fieldTextField.setText(model.getValueAt(i, 0).toString());
        lectureTextField.setText(model.getValueAt(i, 3).toString());
        int lab1 = Integer.parseInt(model.getValueAt(i, 4).toString());
        if(lab1 != 0){
            yesButton.setSelected(true);
            labTextField.setEnabled(true);
            labTextField.setText(String.valueOf(lab1));
            lab2 = lab1;
        }else{
            noButton.setSelected(true);
            labTextField.setEnabled(false);
            labTextField.setText("");
            lab2 = 0;
        }
        
        subjectData = coded + " - " + model.getValueAt(i, 2).toString() + " - " + model.getValueAt(i, 0).toString() + " - " + model.getValueAt(i, 3).toString() + " - " + model.getValueAt(i, 4).toString() ;
       
    }//GEN-LAST:event_subjectTableMouseClicked

    private void updateSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSubjectButtonActionPerformed
        // TODO add your handling code here:
        updateSubjectButton.setEnabled(false);
        PreparedStatement prepState = null;
        try{
            prepState = connObj.conObj.prepareStatement("UPDATE facultydata.subject SET Code = ?, Course_Title = ?, Field = ?, Lecture = ?, Lab = ? WHERE Code = ?");
            prepState.setString(1, courseCodeTextField.getText());
            prepState.setString(2,courseTitleTextField.getText());
            prepState.setString(3,fieldTextField.getText());
            prepState.setInt(4, Integer.parseInt(lectureTextField.getText()));
            prepState.setInt(5, lab2);
            prepState.setString(6,coded);
            prepState.execute();
            connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.subject");
            subjectTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
        }catch(SQLException e){
            e.printStackTrace();
        }
        subjectTable.clearSelection();
    }//GEN-LAST:event_updateSubjectButtonActionPerformed

    private void viewSchedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSchedButtonActionPerformed
        // TODO add your handling code here:
        deleteScheduleButton.setVisible(true);
        try{
            connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.schedule");
            scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));              
        }catch(SQLException e){
            e.printStackTrace();
        }
      
        
        
        
        
    }//GEN-LAST:event_viewSchedButtonActionPerformed

    private void viewDeletedItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDeletedItemsButtonActionPerformed
        // TODO add your handling code here:
        deleteScheduleButton.setVisible(false);
        try{
            connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.deletedItems");
            scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));              
        }catch(SQLException e){
            e.printStackTrace();
        }
              
        
        
    }//GEN-LAST:event_viewDeletedItemsButtonActionPerformed

    private void deleteProfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProfButtonActionPerformed
        // TODO add your handling code here:
       PreparedStatement prepState = null;
       try{
           prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.deletedItems(Name) VALUES (?)");
           prepState.setString(1,profData);
           prepState.execute();
           
           prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.professor WHERE Faculty_ID = ?");
           prepState.setString(1,profID);
           prepState.execute();
           
           connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
           professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
       }catch(SQLException e){
           e.printStackTrace();
       }
       
    }//GEN-LAST:event_deleteProfButtonActionPerformed

    private void deleteSubjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSubjectButtonActionPerformed
        // TODO add your handling code here:
       PreparedStatement prepState = null;
       try{
           prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.deletedItems(Name) VALUES (?)");
           prepState.setString(1,subjectData);
           prepState.execute();
           
           prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.subject WHERE CODE = ?");
           prepState.setString(1, getCourseCode1);
           prepState.execute();
           
           connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.subject");
           subjectTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
       }catch(SQLException e){
           e.printStackTrace();
       }        
        
        
    }//GEN-LAST:event_deleteSubjectButtonActionPerformed
    private String getAbb = "";
    private String getSect = "";
    private String getYear = "";
    private String abbrev = "";
    private String nameCourse = "";
    private void courseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseTableMouseClicked
        // TODO add your handling code here:
       
      
           bachelorLabel.setEnabled(true);
           bachelorNameTextField.setEnabled(true);
           bachelorHintLabel.setEnabled(true);
           
           abbreviateLabel.setEnabled(true);
           abbreviateTextField.setEnabled(true);
           abbreviateHintLabel.setEnabled(true); 
           
           yearLabel1.setEnabled(true);
           yearTextField1.setEnabled(true);
           yearHintLabel1.setEnabled(true);
           
           selectBachelorLabel.setEnabled(false);
           selectBachelorComboBox.setEnabled(false);
           yearTextField.setEnabled(false); 
           jLabel11.setEnabled(false);
           yearLabel.setEnabled(false);
           yearHintLabel.setEnabled(false); 
        
        int i = courseTable.getSelectedRow();
        PreparedStatement prepState = null;
        TableModel model = courseTable.getModel();
        bachelorNameTextField.setText(model.getValueAt(i, 0).toString());
        getAbb = model.getValueAt(i, 1).toString();
        try{
            
            prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.course WHERE Course_Year_Section = ?");
            prepState.setString(1, model.getValueAt(i, 1).toString());
            connObj.rsObj = prepState.executeQuery();
            connObj.rsObj.first();
            getYear = connObj.rsObj.getString("Year");
            abbrev = connObj.rsObj.getString("Abbreviate");
            getSect = connObj.rsObj.getString("Section");
            nameCourse = connObj.rsObj.getString("Course_Name");
            abbreviateTextField.setText(abbrev);
            yearTextField1.setText(getYear);    
            sectionTextField.setText(getSect);            
            coursesComboBox.setSelectedItem(nameCourse); 
            yearComboBox.setSelectedItem(connObj.rsObj.getString("Year"));
            
        }catch(SQLException e){
            e.printStackTrace();
        }
        updateCourseButton.setEnabled(true);
        updateSectionButton.setEnabled(true);
        
    }//GEN-LAST:event_courseTableMouseClicked

    private void updateCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCourseButtonActionPerformed
        // TODO add your handling code here:
        PreparedStatement prepState = null;
        String newAbbr = "";
        try{  
            prepState = connObj.conObj.prepareStatement("Select * From facultydata.course where Year = ?");
            prepState.setString(1,yearTextField1.getText());
            connObj.rsObj = prepState.executeQuery();
            connObj.rsObj.first();
            if(yearTextField1.getText().equals(connObj.rsObj.getString("Year"))){
                JOptionPane.showMessageDialog(null,"Year Already Exist");
            }else{
                newAbbr = abbreviateTextField.getText() + " " + yearTextField1.getText() + "-" + getSect;
                prepState = connObj.conObj.prepareStatement("UPDATE facultydata.course SET Course_Name = ?, Abbreviate = ?, Year = ?, Course_Year_Section = ? WHERE Course_Year_Section = ? ");
                prepState.setString(1, bachelorNameTextField.getText());
                prepState.setString(2, abbreviateTextField.getText());
                prepState.setString(3, yearTextField1.getText());
                prepState.setString(4, newAbbr);
                prepState.setString(5, getAbb);  
                prepState.execute();
                connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
                courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
            }

            
        }catch(SQLException e){
            e.printStackTrace();
        }
        updateCourseButton.setEnabled(true);
    }//GEN-LAST:event_updateCourseButtonActionPerformed

    private void updateSectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSectionButtonActionPerformed
        // TODO add your handling code here:
        
       PreparedStatement prepState = null;
       try{
           prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.course WHERE Section = ?");
           prepState.setString(1, sectionTextField.getText());
           connObj.rsObj = prepState.executeQuery();
           connObj.rsObj.first();
           if(connObj.rsObj.getString("Section").equals(sectionTextField.getText())){
            JOptionPane.showMessageDialog(null,"Section Already Exist");
           }else{
            prepState = connObj.conObj.prepareStatement("UPDATE facultydata.course SET Course_Year_Section = ?, Section = ? Where Course_Year_Section = ?");
            prepState.setString(1, abbrev + " " + getYear + "-" + sectionTextField.getText());
            prepState.setString(2, sectionTextField.getText());
            prepState.setString(3, getAbb);
            //prepState.execute();               
           }

           connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
           courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));       
       }catch(SQLException e){
           e.printStackTrace();
       }
        updateSectionButton.setEnabled(false);
    }//GEN-LAST:event_updateSectionButtonActionPerformed

    private void deleteCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCourseButtonActionPerformed
        // TODO add your handling code here:
        PreparedStatement prepState = null;
        try{
            prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.course(NAME) VALUES (?)");
            prepState.setString(1,nameCourse + " - " + getAbb);
            prepState.execute();
            
            prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.course Where Course_Year_Section = ?");
            prepState.setString(1,getAbb);
            prepState.execute();
            
            connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
            courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteCourseButtonActionPerformed
    private String schedCode = "";
    private String schedData = "";
    private String schedProf = "";
    private void scheduleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scheduleTableMouseClicked
        // TODO add your handling code here:
        int i = scheduleTable.getSelectedRow();
        TableModel model = scheduleTable.getModel();
        schedCode = model.getValueAt(i, 0).toString(); 
        schedData = model.getValueAt(i, 0).toString() + " - " +
                    model.getValueAt(i, 1).toString() + " - " +
                    model.getValueAt(i, 2).toString() + " - " +
                    model.getValueAt(i, 3).toString() + " - " +
                    model.getValueAt(i, 4).toString() + " - " +
                    model.getValueAt(i, 5).toString();
        schedProf = model.getValueAt(i, 5).toString();
       
    }//GEN-LAST:event_scheduleTableMouseClicked
    
    private void deleteScheduleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteScheduleButtonActionPerformed
        // TODO add your handling code here:
        int i = scheduleTable.getSelectedRow();
        TableModel model = scheduleTable.getModel();        
        PreparedStatement prepState = null;
        ResultSet rsLec = null;
        ResultSet rsLab = null;
        int labRest = 0;
        int lecRest = 0;
        try{
          if(scheduleTable.isRowSelected(i)){
              
            prepState = connObj.conObj.prepareStatement("INSERT INTO facultydata.deletedItems(Name) VALUES(?)");
            prepState.setString(1,schedData);
            prepState.execute();
   
            prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.labsched WHERE CODE = ?");
            prepState.setString(1,schedCode);
            rsLab = prepState.executeQuery();
            
            if(rsLab.first()){
                rsLab.first();
                int copyLabInResult = 0;
                int copyLabOutResult = 0;
                String copyLabInFormat = "";            
                String copyLabIn = rsLab.getString("TimeIn");
                copyLabInFormat = copyLabIn.substring(copyLabIn.length() - 2);
                copyLabIn = copyLabIn.substring(0, copyLabIn.length() - 2);
                String copyLabInSplit[] = copyLabIn.split(":");
                String copyLabInContainer = "";
                for(String temp: copyLabInSplit){
                    copyLabInContainer += temp;
                }    // Removes Single Character/Symbol
                 int copyLabInConverted = Integer.parseInt(copyLabInContainer);

                switch(copyLabInFormat){
                    case "AM":
                        copyLabInResult += copyLabInConverted;

                    break;
                    case "PM":
                        if(copyLabInConverted >= 1200 && copyLabInConverted <= 1300){
                           copyLabInResult += copyLabInConverted;

                        }else{
                           copyLabInResult = copyLabInConverted + 1200;

                        }                                             
                    break;     
                } // Checking the Laboratory Time Format... 
                
                String copyLabOutFormat = "";
                String copyLabOut = rsLab.getString("TimeOut");
                copyLabOutFormat = copyLabOut.substring(copyLabOut.length() - 2);
                copyLabOut = copyLabOut.substring(0,copyLabOut.length() - 2);
                String copyLabOutSplit[] = copyLabOut.split(":");
                String copyLabOutContainer = "";
                for(String temp: copyLabOutSplit){
                    copyLabOutContainer += temp;
                }    // Removes Single Character/Symbol
                int copyLabOutConverted = Integer.parseInt(copyLabOutContainer);

                switch(copyLabOutFormat){
                    case "AM":
                        copyLabOutResult += copyLabOutConverted;                                    
                    break;
                    case "PM":
                        if(copyLabOutConverted >= 1200 && copyLabOutConverted <= 1300){
                            copyLabOutResult += copyLabOutConverted;    
                        }else{
                            copyLabOutResult = copyLabOutConverted + 1200;  
                        }
                    break;     
                }
                labRest = (copyLabOutResult - copyLabInResult) / 100;            
            }else{
                labRest = 0;
            }
            
            prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.lecsched WHERE CODE = ?");
            prepState.setString(1,schedCode);
            rsLec = prepState.executeQuery();
            if(rsLec.first()){
                rsLec.first();
                String copyLecInFormat = "";
                int copyLecInResult = 0;
                int copyLecOutResult = 0;
                String copyLecIn = rsLec.getString("TimeIn");
                copyLecInFormat = copyLecIn.substring(copyLecIn.length() -2);
                copyLecIn = copyLecIn.substring(0,copyLecIn.length() - 2);
                String copyLecInSplit[] = copyLecIn.split(":");
                String copyLecInContainer = "";
                for(String temp: 
                        copyLecInSplit){
                    copyLecInContainer += temp;
                }    // Removes Single Character/Symbol
                int copyLecInConverted = Integer.parseInt(copyLecInContainer);
                switch(copyLecInFormat){
                    case "AM":
                        copyLecInResult += copyLecInConverted;

                    break;
                    case "PM":
                        if(copyLecInConverted >= 1200 && copyLecInConverted <= 1300){
                            copyLecInResult += copyLecInConverted;                        
                        }else{                                  
                            copyLecInResult = copyLecInConverted + 1200;                                                                 
                        }
                    break;     
                } // Checking the Time Format

                String copyLecOutFormat = "";
                String copyLecOut = rsLec.getString("TimeOut"); 
                copyLecOutFormat = copyLecOut.substring(copyLecOut.length() - 2);
                copyLecOut = copyLecOut.substring(0, copyLecOut.length() - 2);
                String copyLecOutSplit[] = copyLecOut.split(":");
                String copyLecOutContainer = "";      
                for(String temp: copyLecOutSplit){
                    copyLecOutContainer += temp;
                }    // Removes Single Character/Symbol             
                int copyLecOutConverted = Integer.parseInt(copyLecOutContainer);
                switch(copyLecOutFormat){
                    case "AM":       
                        copyLecOutResult += copyLecOutConverted;
                    break;
                    case "PM":
                        if(copyLecOutConverted >= 1200 && copyLecOutConverted <= 1300){
                            copyLecOutResult += copyLecOutConverted;
                        }else{
                            copyLecOutResult = copyLecOutConverted + 1200;   
                        }
                    break;
                }    
                lecRest = (copyLecOutResult - copyLecInResult) / 100;
            }else{
                lecRest = 0;
            }

            int rest = lecRest + labRest;
            
            prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.professor WHERE fullName = ?");
            prepState.setString(1,schedProf);
            connObj.rsObj = prepState.executeQuery();
            connObj.rsObj.first();
            int profAvail = Integer.parseInt(connObj.rsObj.getString("Available"));            
            int finalResult = rest + profAvail;
            
            prepState = connObj.conObj.prepareStatement("UPDATE facultydata.professor SET Available = ? WHERE FULLNAME = ?");
            prepState.setInt(1,finalResult);
            prepState.setString(2,schedProf);
            prepState.execute();
            
            prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.lecSched WHERE Code = ?");
            prepState.setString(1,schedCode);
            prepState.execute();            
            prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.labSched WHERE Code = ?");
            prepState.setString(1,schedCode);
            prepState.execute();            
            prepState = connObj.conObj.prepareStatement("DELETE FROM facultydata.schedule WHERE Course_Section_Code = ?");
            prepState.setString(1,schedCode);
            prepState.execute();
            
            connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Section_Code, Course_Title, Day, Lecture, Laboratory, Professor From FacultyData.Schedule");
            scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));  
            connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
            professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));   
          } else{
              JOptionPane.showMessageDialog(null,"Nothing is Selected");
          }
                       
            
        }catch(SQLException e){
            e.printStackTrace();
        }
        
        scheduleTable.clearSelection();
    }//GEN-LAST:event_deleteScheduleButtonActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        PreparedStatement prepState = null;
        DefaultListModel list = new DefaultListModel();
        try{    
            if(jComboBox1.getSelectedItem() == "All"){
                list = (DefaultListModel) alternativeList.getModel();
                list.removeAllElements();                
                prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.professor WHERE Field = ?");
                prepState.setString(1,(String)departmentComboBox.getSelectedItem());
                connObj.rsObj = prepState.executeQuery();
                while(connObj.rsObj.next()){
                    list.addElement(connObj.rsObj.getString("Fullname"));
                }
                alternativeList.setModel(list);
            }else if(jComboBox1.getSelectedItem() == "Full-Time"){
                list = (DefaultListModel) alternativeList.getModel();
                list.removeAllElements();                
                prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.professor WHERE Field = ? AND status = 'Full-Time'");
                prepState.setString(1,(String)departmentComboBox.getSelectedItem());
                connObj.rsObj = prepState.executeQuery();
                while(connObj.rsObj.next()){
                    list.addElement(connObj.rsObj.getString("Fullname"));
                }
                alternativeList.setModel(list);
            }else if(jComboBox1.getSelectedItem() == "Part-Time"){
                list = (DefaultListModel) alternativeList.getModel();
                list.removeAllElements();
                prepState = connObj.conObj.prepareStatement("SELECT * FROM facultydata.professor WHERE Field = ? AND status = 'Part-Time'");
                prepState.setString(1,(String)departmentComboBox.getSelectedItem());
                connObj.rsObj = prepState.executeQuery();
                while(connObj.rsObj.next()){
                    list.addElement(connObj.rsObj.getString("Fullname"));
                }
                alternativeList.setModel(list);

            }
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    private int click = 0;

    private void courseCode(){
        try{    
            connObj.rsObj = connObj.stateObj.executeQuery("SELECT * FROM FACULTYDATA.Subject");
            while(connObj.rsObj.next()){
            courseCodeComboBox.addItem(connObj.rsObj.getString("Subject.Code"));   
            }
        }catch(SQLException e){
            e.printStackTrace();
        }   
    }

    private void getDatatoTable(){
    try{
        connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Name, Course_Year_Section From facultydata.course");
            courseTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
        connObj.rsObj = connObj.stateObj.executeQuery("Select * From facultydata.subject");
            subjectTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
        connObj.rsObj = connObj.stateObj.executeQuery("Select Faculty_ID, LastName, FirstName, Status, Field, Hours, Available From facultydata.professor");
            professorTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));   
        connObj.rsObj = connObj.stateObj.executeQuery("Select Course_Section_Code, Course_Title, Day, Lecture, Laboratory, Professor From FacultyData.Schedule");
            scheduleTable.setModel(DbUtils.resultSetToTableModel(connObj.rsObj));
           
       }
       catch(SQLException a){
           a.printStackTrace();
       }
    } //Getting the data in the database and transfers it to Java Table...
    
    private void courses(){
        try{
            connObj.rsObj = connObj.stateObj.executeQuery("Select Distinct Course.Course_Name From FacultyData.course");
            while(connObj.rsObj.next()){
                coursesComboBox.addItem(connObj.rsObj.getString("Course.Course_Name"));
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
    }
    
    private void yearSection(){
            try{
                connObj.rsObj = connObj.stateObj.executeQuery("Select * From Facultydata.Course");
            while(connObj.rsObj.next()){
                yrSecComboBox.addItem(connObj.rsObj.getString("Course_Year_Section"));
            }
            }catch(SQLException e){
                    e.printStackTrace();
            }        
    }
    
    private void departField(){
            try{
                connObj.rsObj = connObj.stateObj.executeQuery("Select Distinct Professor.field From Facultydata.professor");
            while(connObj.rsObj.next()){
                departmentComboBox.addItem(connObj.rsObj.getString("professor.field"));
            }
        }catch(SQLException e){
            e.printStackTrace();
        }
        
    }
    
    

    public static void main(String args[]){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });



    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Logo;
    private javax.swing.JPanel View;
    private javax.swing.JLabel abbreviateHintLabel;
    private javax.swing.JLabel abbreviateLabel;
    private javax.swing.JTextField abbreviateTextField;
    public javax.swing.JToggleButton addCourseButton;
    public javax.swing.JPanel addCoursePanel;
    private javax.swing.JLabel addProfFacultyIDLabel;
    private javax.swing.JLabel addProfField;
    public javax.swing.JPanel addProfPanel;
    public javax.swing.JToggleButton addProfessorButton;
    public javax.swing.JToggleButton addSchedButton;
    public javax.swing.JPanel addSchedulePanel;
    private javax.swing.JLabel addSection;
    private javax.swing.JLabel addSectionLabel;
    private javax.swing.JLabel addStatusLabel;
    public javax.swing.JToggleButton addSubjectButton;
    private javax.swing.JLabel addSubjectCCLabel;
    private javax.swing.JLabel addSubjectDescriptionLabel;
    private javax.swing.JLabel addSubjectFieldLabel;
    private javax.swing.JLabel addSubjectLabLabel;
    private javax.swing.JLabel addSubjectLecLabel;
    public javax.swing.JPanel addSubjectPanel;
    private javax.swing.JLabel alternativeLabel;
    private javax.swing.JList<String> alternativeList;
    private javax.swing.JScrollPane alternativePane;
    private javax.swing.JPanel alternativePanel;
    private javax.swing.JLabel bachelorHintLabel;
    private javax.swing.JLabel bachelorLabel;
    private javax.swing.JTextField bachelorNameTextField;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearCourseButton;
    private javax.swing.JButton clearCourseButton1;
    private javax.swing.JButton clearProfButton;
    private javax.swing.JButton clearRoomField;
    private javax.swing.JButton clearSchedButton1;
    private javax.swing.JButton clearScheduleButton;
    private javax.swing.JButton clearSubjectButton;
    private javax.swing.JComboBox<String> courseCodeComboBox;
    private javax.swing.JTextField courseCodeTextField;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JButton courseScheduleButton;
    private javax.swing.JPanel courseSecTab;
    private javax.swing.JTable courseTable;
    private javax.swing.JTextField courseTitleTextField;
    private javax.swing.JComboBox<String> coursesComboBox;
    private javax.swing.JLabel coursesLabel;
    private javax.swing.JLabel dashLabel;
    private javax.swing.JComboBox<String> dayComboBox;
    private javax.swing.JLabel dayLabel2;
    private javax.swing.JButton deleteCourseButton;
    private javax.swing.JButton deleteProfButton;
    private javax.swing.JButton deleteScheduleButton;
    private javax.swing.JButton deleteSubjectButton;
    private javax.swing.JComboBox<String> departmentComboBox;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JComboBox<String> endTimeComboBox1;
    private javax.swing.JComboBox<String> endTimeComboBox2;
    private javax.swing.JComboBox<String> endTimeFormatCB1;
    private javax.swing.JComboBox<String> endTimeFormatCB2;
    private javax.swing.JLabel endTimeLabel1;
    private javax.swing.JLabel endTimeLabel2;
    private javax.swing.JButton enterCourseButton;
    private javax.swing.JButton enterCourseButton1;
    private javax.swing.JButton enterProfButton;
    private javax.swing.JButton enterProfSchedButton1;
    private javax.swing.JButton enterSubjectButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField facultyIDTextField;
    private javax.swing.JTextField fieldTextField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField labRoomTextField;
    private javax.swing.JTextField labTextField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField lectRoomTextField;
    private javax.swing.JTextField lectureTextField;
    private javax.swing.JLabel lectureTimeNote;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JPanel midPanel;
    private javax.swing.JRadioButton noButton;
    private javax.swing.JCheckBox otherDegreeCheckBox;
    private javax.swing.JTextField profFieldTextField;
    private javax.swing.JLabel profLabel;
    private javax.swing.JButton profSchedButton;
    private javax.swing.JComboBox<String> profStatusCB;
    private javax.swing.JPanel profTab;
    private javax.swing.JTable professorTable;
    private javax.swing.JButton roomScheduleButton;
    private javax.swing.JLabel roomScheduleLabel;
    private javax.swing.JPanel roomTab;
    private javax.swing.JLabel schedLabel;
    private javax.swing.JLabel scheduleLabel;
    private javax.swing.JTable scheduleTable;
    private javax.swing.JTextField sectionTextField;
    private javax.swing.JComboBox<String> selectBachelorComboBox;
    private javax.swing.JLabel selectBachelorLabel;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JComboBox<String> startTimeComboBox1;
    private javax.swing.JComboBox<String> startTimeComboBox2;
    private javax.swing.JComboBox<String> startTimeFormatCB1;
    private javax.swing.JComboBox<String> startTimeFormatCB2;
    private javax.swing.JLabel startTimeLabel1;
    private javax.swing.JLabel startTimeLabel2;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTable subjectTable;
    private javax.swing.JTextArea textArea1;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton updateCourseButton;
    private javax.swing.JButton updateProfButton;
    private javax.swing.JButton updateSectionButton;
    private javax.swing.JButton updateSubjectButton;
    private javax.swing.JToggleButton viewButton;
    private javax.swing.JButton viewDeletedItemsButton;
    private javax.swing.JButton viewSchedButton;
    private javax.swing.JComboBox<String> yearComboBox;
    private javax.swing.JLabel yearHintLabel;
    private javax.swing.JLabel yearHintLabel1;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JLabel yearLabel1;
    private javax.swing.JTextField yearTextField;
    private javax.swing.JTextField yearTextField1;
    private javax.swing.JRadioButton yesButton;
    private javax.swing.JComboBox<String> yrSecComboBox;
    // End of variables declaration//GEN-END:variables

}
